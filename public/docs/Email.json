{"files":[{"content":"import React from 'react';\nimport moment from 'moment';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Grid,\n  Heading,\n  InfiniteScroll,\n  Markdown,\n  Text,\n  TextInput,\n} from 'grommet';\nimport { StatusGoodSmall } from 'grommet-icons';\n\nimport useEmail from './useEmail';\nfunction EmailTag({ color, label, ...props }) {\n  return (\n    <Box\n      className=\"EmailTag\"\n      background={color}\n      pad={{\n        horizontal: 'small',\n        vertical: 'xsmall',\n      }}\n      {...props}\n    >\n      <Text size=\"small\">{label}</Text>\n    </Box>\n  );\n}\n\nfunction EmailFolders({\n  folders = [],\n  activeFolderId,\n  unreadEmails = {},\n  onClick = () => {},\n}) {\n  return (\n    <Box pad=\"medium\" gap=\"small\" flex={false}>\n      {folders.map((folder) => (\n        <Button key={folder.id} onClick={() => onClick(folder.id)} plain>\n          <Box direction=\"row\" justify=\"between\">\n            <Text\n              color={folder?.id === activeFolderId ? 'brand' : null}\n              weight={folder?.id === activeFolderId ? 'bold' : null}\n            >\n              {folder?.name}\n            </Text>\n            {unreadEmails[folder.id] && (\n              <Text size=\"small\" weight=\"bold\">\n                {unreadEmails[folder.id].length}\n              </Text>\n            )}\n          </Box>\n        </Button>\n      ))}\n    </Box>\n  );\n}\nfunction EmailShort({\n  subject,\n  sender,\n  labels,\n  sent,\n  onClick = () => {},\n  background,\n}) {\n  return (\n    <Button onClick={onClick}>\n      <Box\n        direction=\"row\"\n        pad=\"medium\"\n        gap=\"small\"\n        flex={false}\n        background={background}\n      >\n        <Avatar src={sender?.profile} />\n        <Box flex>\n          <Box>\n            <Box direction=\"row\" justify=\"between\" fill=\"horizontal\">\n              <Text color=\"dark-2\" size=\"xsmall\">\n                {sender?.firstName} {sender?.lastName}\n              </Text>\n\n              <Text color=\"dark-6\" size=\"xsmall\">\n                {moment(sent).format('ll')}\n              </Text>\n            </Box>\n            <Text weight=\"bold\" truncate>\n              {subject}\n            </Text>\n          </Box>\n          <Box direction=\"row\" gap=\"xxsmall\" margin={{ top: 'xsmall' }}>\n            {labels.map((label) => (\n              <Box\n                key={`${label.id}`}\n                background={label.color}\n                round\n                pad=\"xsmall\"\n              />\n            ))}\n          </Box>\n        </Box>\n      </Box>\n    </Button>\n  );\n}\n\nfunction EmailThread({ id, body, labels, recipients, subject, sender, sent }) {\n  return (\n    <Box>\n      <Box\n        direction=\"row\"\n        align=\"center\"\n        justify=\"start\"\n        gap=\"small\"\n        pad=\"large\"\n        border=\"bottom\"\n      >\n        <Heading level={4} margin=\"none\">\n          {subject}\n        </Heading>\n        {labels.map((label) => (\n          <EmailTag key={label?.id} label={label?.name} color={label?.color} />\n        ))}\n      </Box>\n\n      <Box\n        direction=\"row\"\n        pad=\"medium\"\n        gap=\"small\"\n        flex={false}\n        border=\"bottom\"\n      >\n        <Avatar src={sender?.profile} />\n        <Box flex>\n          <Box direction=\"row\" justify=\"between\" fill=\"horizontal\">\n            <Box>\n              <Text color=\"dark-2\" size=\"xsmall\" weight=\"bold\">\n                {sender?.firstName} {sender?.lastName}\n              </Text>\n\n              <Box direction=\"row\" gap=\"xsmall\">\n                <Text size=\"xsmall\">to</Text>\n                {recipients.map((recipient) => {\n                  return (\n                    <Text\n                      key={recipient?.id}\n                      color=\"dark-2\"\n                      size=\"xsmall\"\n                      weight=\"bold\"\n                    >\n                      {recipient?.firstName} {recipient?.lastName}\n                    </Text>\n                  );\n                })}\n              </Box>\n            </Box>\n\n            <Text color=\"dark-6\" size=\"xsmall\">\n              {moment(sent).format('ll')}\n            </Text>\n          </Box>\n        </Box>\n      </Box>\n\n      <Box pad=\"medium\" flex={false} border=\"bottom\">\n        <Markdown>{body}</Markdown>\n      </Box>\n\n      <Box direction=\"row\" justify=\"end\" pad=\"medium\">\n        <Button label=\"Reply\" />\n      </Box>\n    </Box>\n  );\n}\n\nfunction EmailLabels({ labels = [], onClick = () => {} }) {\n  return (\n    <Box pad=\"medium\" gap=\"small\" flex={false}>\n      {labels.map((label) => (\n        <Button key={label?.id} onClick={() => onClick(label?.id)} plain>\n          <Box direction=\"row\" justify=\"between\">\n            <StatusGoodSmall color={label?.color} />\n            <Text>{label?.name}</Text>\n          </Box>\n        </Button>\n      ))}\n    </Box>\n  );\n}\n\nfunction EmailsByFolder({ emails = [], activeEmail, onClick, onSearch }) {\n  return (\n    <Box>\n      <Box\n        pad={{ vertical: 'xsmall', horizontal: 'small' }}\n        border=\"bottom\"\n        flex={false}\n      >\n        <TextInput\n          placeholder=\"Search Email\"\n          plain\n          onChange={(event) => onSearch(event.target.value)}\n        />\n      </Box>\n      <Box overflow=\"auto\">\n        <InfiniteScroll steps={3} items={emails} show={0}>\n          {(email, index) => (\n            <EmailShort\n              key={email.id}\n              {...email}\n              labels={email.labels}\n              border={index ? 'top' : null}\n              background={activeEmail?.id === email?.id ? 'light-1' : null}\n              onClick={() => onClick(email.id)}\n            />\n          )}\n        </InfiniteScroll>\n      </Box>\n    </Box>\n  );\n}\n\nfunction EmailsByLabel({\n  emails = [],\n  labels = [],\n  activeEmail,\n  onClick,\n  onClear,\n}) {\n  return (\n    <Box overflow=\"auto\">\n      <InfiniteScroll steps={3} items={emails} show={0}>\n        {(email, index) => (\n          <EmailShort\n            key={email.id}\n            {...email}\n            border={index ? 'top' : null}\n            background={activeEmail?.id === email?.id ? 'light-1' : null}\n            onClick={() => onClick(email.id)}\n          />\n        )}\n      </InfiniteScroll>\n    </Box>\n  );\n}\n\nfunction AppliedFilters({ labels, onClear }) {\n  return (\n    <Box\n      direction=\"row\"\n      justify=\"end\"\n      align=\"center\"\n      gap=\"small\"\n      flex={false}\n      fill\n    >\n      <Box direction=\"row\" justify=\"start\" gap=\"small\" flex={false}>\n        {labels.map((label) => (\n          <EmailTag key={label?.id} label={label?.name} color={label?.color} />\n        ))}\n      </Box>\n      <Button onClick={() => onClear()} plain>\n        clear\n      </Button>\n    </Box>\n  );\n}\n\nexport default function Email() {\n  const {\n    activeEmail,\n    activeFolder,\n    activeFolderId,\n    activeFolderEmails,\n    activeLabelEmails,\n    activeLabels,\n    clearLabelFilters,\n    composeEmail,\n    folders,\n    filterByLabel,\n    labels,\n    labelsById,\n    openEmail,\n    openFolder,\n    searchEmails,\n    unreadEmailsByFolderId,\n  } = useEmail();\n\n  return (\n    <Grid\n      columns={['1/4', '1/4', '1/4', '1/4']}\n      rows={['auto', 'flex', 'auto']}\n      areas={[\n        [\n          'EmailCompose',\n          'EmailThreadsHeader',\n          'EmailThreadHeader',\n          'EmailThreadHeader',\n        ],\n        ['EmailSidebar', 'EmailThreads', 'EmailThread', 'EmailThread'],\n        ['EmailSidebar', 'EmailThreads', 'EmailThread', 'EmailThread'],\n      ]}\n      fill\n    >\n      <Box\n        gridArea=\"EmailCompose\"\n        pad=\"medium\"\n        border={[{ side: 'bottom' }, { side: 'right' }]}\n        height=\"xsmall\"\n        justify=\"center\"\n      >\n        <Button label=\"Compose\" primary onClick={() => composeEmail()} />\n      </Box>\n      <Box gridArea=\"EmailSidebar\" border=\"right\" overflow=\"auto\">\n        <EmailFolders\n          activeFolderId={activeFolderId}\n          folders={folders}\n          unreadEmails={unreadEmailsByFolderId}\n          onClick={(id) => openFolder(id)}\n        />\n        <EmailLabels labels={labels} onClick={(id) => filterByLabel(id)} />\n      </Box>\n      <Box\n        gridArea=\"EmailThreadsHeader\"\n        direction=\"row\"\n        pad=\"medium\"\n        border={[{ side: 'bottom' }, { side: 'right' }]}\n        height=\"xsmall\"\n        align=\"center\"\n        justify=\"between\"\n      >\n        {activeLabels.length ? (\n          <AppliedFilters\n            emails={activeLabelEmails}\n            labels={activeLabels}\n            onClick={openEmail}\n            onClear={clearLabelFilters}\n          />\n        ) : (\n          <Heading level=\"4\" margin=\"none\">\n            {activeFolder?.name}\n          </Heading>\n        )}\n      </Box>\n\n      <Box gridArea=\"EmailThreads\" border=\"right\">\n        {activeLabels.length ? (\n          <EmailsByLabel\n            emails={activeLabelEmails}\n            labels={activeLabels}\n            onClick={openEmail}\n            onClear={clearLabelFilters}\n          />\n        ) : (\n          <EmailsByFolder\n            emails={activeFolderEmails}\n            onClick={openEmail}\n            onSearch={(value) => searchEmails(value)}\n          />\n        )}\n      </Box>\n      <Box\n        gridArea=\"EmailThreadHeader\"\n        direction=\"row\"\n        justify=\"between\"\n        height=\"xsmall\"\n        pad=\"medium\"\n        border=\"bottom\"\n      >\n        <Box>actions</Box>\n        <Box>toolbar</Box>\n      </Box>\n      <Box gridArea=\"EmailThread\">\n        {activeEmail && (\n          <EmailThread\n            {...activeEmail}\n            labels={activeEmail.labelIds.map((labelId) => {\n              return labelsById[labelId];\n            })}\n          />\n        )}\n      </Box>\n    </Grid>\n  );\n}\n","filepath":"Email.js","filename":"Email.js","directory":".","app":"Email"},{"content":"export { default } from './Email'\n","filepath":"index.js","filename":"index.js","directory":".","app":"Email"},{"content":"import { useMemo, useState } from 'react';\nimport { chain } from 'lodash';\nimport * as config from './config';\n\nexport default function useEmail() {\n  const [emails] = useState(config?.emails);\n  const [labels] = useState(config?.labels);\n  const [folders] = useState(config?.folders);\n  const [activeLabelIds, setActiveLabelIds] = useState([]);\n  const [activeEmailId, setActiveEmailId] = useState();\n  const [activeFolderId, setActiveFolderId] = useState(\n    config?.settings?.defaultFolder\n  );\n  const labelsById = useMemo(() => {\n    return chain(labels).keyBy('id').value();\n  }, [labels]);\n  const foldersById = useMemo(() => {\n    return chain(folders).keyBy('id').value();\n  }, [folders]);\n  const emailsByFolderId = useMemo(() => {\n    return chain(emails).groupBy('folderId').value();\n  }, [emails]);\n  const activeFolder = useMemo(\n    () => folders.find((folder) => folder.id === activeFolderId),\n    [folders, activeFolderId]\n  );\n  const activeFolderEmails = useMemo(() => {\n    return emailsByFolderId[activeFolderId]?.map((email) => {\n      return {\n        ...email,\n        labels: email?.labelIds.length\n          ? email.labelIds.map((labelId) => labelsById[labelId])\n          : [],\n      };\n    });\n  }, [emailsByFolderId, activeFolderId, labelsById]);\n  const activeEmail = useMemo(\n    () => activeFolderEmails.find((email) => email.id === activeEmailId),\n    [activeFolderEmails, activeEmailId]\n  );\n  const activeLabels = useMemo(() => {\n    return activeLabelIds.map((labelId) => labelsById[labelId]);\n  }, [labelsById, activeLabelIds]);\n  const activeLabelEmails = useMemo(() => {\n    return emails\n      .filter((email) =>\n        email?.labelIds?.some((labelId) => activeLabelIds?.includes(labelId))\n      )\n      ?.map((email) => {\n        return {\n          ...email,\n          labels: email?.labelIds.length\n            ? email.labelIds.map((labelId) => labelsById[labelId])\n            : [],\n        };\n      });\n  }, [emails, activeLabelIds, labelsById]);\n  const unreadEmails = useMemo(() => {\n    return emails.filter((email) => !email?.viewed);\n  }, [emails]);\n  const unreadEmailsByFolderId = useMemo(() => {\n    return chain(unreadEmails).groupBy('folderId').value();\n  }, [unreadEmails]);\n\n  return useMemo(() => {\n    function composeEmail(folderId) {}\n\n    function openEmail(emailId) {\n      setActiveEmailId(emailId);\n    }\n\n    function openFolder(folderId) {\n      setActiveFolderId(folderId);\n    }\n\n    function filterByLabel(labelId) {\n      setActiveLabelIds([...activeLabelIds, labelId]);\n    }\n\n    function searchEmails(labelId) {}\n\n    function clearLabelFilters() {\n      setActiveLabelIds([]);\n    }\n\n    return {\n      activeEmail,\n      activeEmailId,\n      activeFolder,\n      activeFolderEmails,\n      activeLabelEmails,\n      activeFolderId,\n      activeLabels,\n      activeLabelIds,\n      clearLabelFilters,\n      composeEmail,\n      emails,\n      emailsByFolderId,\n      filterByLabel,\n      folders,\n      foldersById,\n      labels,\n      labelsById,\n      openEmail,\n      openFolder,\n      searchEmails,\n      unreadEmails,\n      unreadEmailsByFolderId,\n    };\n  }, [\n    emails,\n    labels,\n    folders,\n    activeEmailId,\n    activeEmail,\n    activeFolder,\n    activeFolderId,\n    activeFolderEmails,\n    activeLabels,\n    activeLabelIds,\n    activeLabelEmails,\n    emailsByFolderId,\n    labelsById,\n    foldersById,\n    unreadEmails,\n    unreadEmailsByFolderId,\n  ]);\n}\n","filepath":"useEmail.js","filename":"useEmail.js","directory":".","app":"Email"},{"content":"import * as users from './users';\n\nexport const emails = [\n  {\n    id: 'email-1',\n    subject: 'subject for email #1',\n    body: 'body for email #1',\n    sender: users.user2,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: [],\n    sent: 1598436066854,\n    viewed: 1598436066854,\n  },\n  {\n    id: 'email-2',\n    subject: 'subject for email #2',\n    body: 'body for email #2',\n    sender: users.user3,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: [],\n    sent: 1598436166854,\n    viewed: 1598436166854,\n  },\n  {\n    id: 'email-3',\n    subject: 'subject for email #3',\n    body: 'body for email #3',\n    sender: users.user4,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: [],\n    sent: 1598436266854,\n    viewed: 1598436266854,\n  },\n  {\n    id: 'email-4',\n    subject: 'subject for email #4',\n    body: 'body for email #4',\n    sender: users.user5,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-1', 'label-2'],\n    sent: 1598436366854,\n    viewed: 1598436366854,\n  },\n  {\n    id: 'email-5',\n    subject: 'subject for email #5',\n    body: 'body for email #5',\n    sender: users.user6,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-3', 'label-4'],\n    sent: 1598436466854,\n    viewed: 1598436466854,\n  },\n  {\n    id: 'email-6',\n    subject: 'subject for email #6',\n    body: 'body for email #6',\n    sender: users.user7,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-5', 'label-6'],\n    sent: 1598436566854,\n    viewed: 1598436566854,\n  },\n  {\n    id: 'email-7',\n    subject: 'subject for email #7',\n    body: 'body for email #7',\n    sender: users.user7,\n    recipients: [\n      users.user1,\n      users.user2,\n      users.user3,\n      users.user4,\n      users.user5,\n      users.user6,\n    ],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-1'],\n    sent: 1598436616854,\n    viewed: 1598436616854,\n  },\n  {\n    id: 'email-8',\n    subject: 'subject for email #8',\n    body: 'body for email #8',\n    sender: users.user1,\n    recipients: [users.user2],\n    attachments: [],\n    folderId: 'folder-2',\n    labelIds: ['label-3'],\n    sent: 1598436626854,\n    viewed: 1598436626854,\n  },\n  {\n    id: 'email-9',\n    subject: 'subject for email #9',\n    body: 'body for email #9',\n    sender: users.user1,\n    recipients: [users.user3],\n    attachments: [],\n    folderId: 'folder-3',\n    labelIds: ['label-5'],\n    sent: 1598436636854,\n    viewed: 1598436636854,\n  },\n  {\n    id: 'email-9',\n    subject: 'subject for email #9',\n    body: 'body for email #9',\n    sender: users.user2,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-4',\n    labelIds: ['label-1'],\n    sent: 1598436646854,\n    viewed: 1598436646854,\n  },\n  {\n    id: 'email-10',\n    subject: 'subject for email #10',\n    body: 'body for email #10',\n    sender: users.user3,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-5',\n    labelIds: ['label-3'],\n    sent: 1598436656854,\n    viewed: null,\n  },\n  {\n    id: 'email-11',\n    subject: 'subject for email #11',\n    body: 'body for email #11',\n    sender: users.user4,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-6',\n    labelIds: [],\n    sent: 1598436656854,\n    viewed: 1598436656854,\n  },\n  {\n    id: 'email-12',\n    subject: 'subject for email #12',\n    body: 'body for email #12',\n    sender: users.user5,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-7',\n    labelIds: ['label-1', 'label-2'],\n    sent: 1598436666854,\n    viewed: 1598436666854,\n  },\n  {\n    id: 'email-13',\n    subject: 'subject for email #13',\n    body: 'body for email #13',\n    sender: users.user5,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-1', 'label-2'],\n    sent: 1598436666854,\n    viewed: 1598436666854,\n  },\n  {\n    id: 'email-14',\n    subject: 'subject for email #14',\n    body: 'body for email #14',\n    sender: users.user5,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-1', 'label-2'],\n    sent: 1598436666854,\n    viewed: null,\n  },\n  {\n    id: 'email-15',\n    subject: 'subject for email #15',\n    body: 'body for email #15',\n    sender: users.user5,\n    recipients: [users.user1],\n    attachments: [],\n    folderId: 'folder-1',\n    labelIds: ['label-1', 'label-2'],\n    sent: 1598436666854,\n    viewed: null,\n  },\n];\n\nexport const folders = [\n  { id: 'folder-1', name: 'Inbox' },\n  { id: 'folder-2', name: 'Sent' },\n  { id: 'folder-3', name: 'Drafts' },\n  { id: 'folder-4', name: 'Trash' },\n  { id: 'folder-5', name: 'Important' },\n  { id: 'folder-6', name: 'Spam' },\n  { id: 'folder-7', name: 'Starred' },\n];\n\nexport const labels = [\n  { id: 'label-2', name: 'home', color: 'blue' },\n  { id: 'label-1', name: 'work', color: 'orange' },\n  { id: 'label-3', name: 'church', color: 'green' },\n  { id: 'label-5', name: 'family', color: 'pink' },\n  { id: 'label-4', name: 'vacation', color: 'purple' },\n  { id: 'label-6', name: 'finance', color: 'red' },\n];\n\nexport const settings = {\n  defaultFolder: 'folder-1',\n};\n","filepath":"config/config.js","filename":"config.js","directory":"config","app":"Email"},{"content":"export * from './config';\n","filepath":"config/index.js","filename":"index.js","directory":"config","app":"Email"},{"content":"const { PUBLIC_URL } = process.env;\n\nexport const user1 = {\n  id: 'user-1',\n  username: 'johnd',\n  firstName: 'John',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy1.jpg`,\n  company: 'That Company Inc.',\n\n  email: 'johnd@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user2 = {\n  id: 'user-2',\n  username: 'janed',\n  firstName: 'Jane',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl1.jpg`,\n  company: 'Some Company Inc.',\n\n  email: 'janed@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user3 = {\n  id: 'user-3',\n  username: 'bills',\n  firstName: 'Bill',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy2.jpg`,\n  company: 'Another Company Inc.',\n\n  email: 'bills@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user4 = {\n  id: 'user-4',\n  username: 'suzyq',\n  firstName: 'Suzy',\n  lastName: 'Q',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl2.jpg`,\n  company: 'Not A Company Inc.',\n\n  email: 'suzyq@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user5 = {\n  id: 'user-5',\n  username: 'mikes',\n  firstName: 'Mike',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy3.jpg`,\n  company: 'Same Company Inc.',\n\n  email: 'mikes@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user6 = {\n  id: 'user-6',\n  username: 'saraht',\n  firstName: 'Sarah',\n  lastName: 'T',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl3.jpg`,\n  company: 'Should Be A Company Inc.',\n\n  email: 'saraht@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user7 = {\n  id: 'user-7',\n  username: 'markw',\n  firstName: 'Mark',\n  lastName: 'W',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy4.jpg`,\n  company: 'Was A Company Inc.',\n\n  email: 'markw@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n","filepath":"config/users.js","filename":"users.js","directory":"config","app":"Email"}]}
