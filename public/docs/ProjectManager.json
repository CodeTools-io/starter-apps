{"files":[{"content":"import React, { useEffect } from 'react';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  DropButton,\n  Heading,\n  Paragraph,\n  Text,\n} from 'grommet';\nimport {\n  Attachment,\n  Chat,\n  Clock,\n  FormAdd,\n  More,\n  Trash,\n  UserAdd,\n} from 'grommet-icons';\nimport moment from 'moment';\nimport useProjectManager from './useProjectManager';\nfunction ProjectBoardStatusColumn({ id, name, tasks }) {\n  return (\n    <Card background=\"light-3\" elevation=\"none\" pad=\"medium\" gap=\"medium\" fill>\n      <Box direction=\"row\" justify=\"between\" align=\"center\" gap=\"medium\">\n        <Heading level={4} margin=\"none\" flex>\n          {name}\n        </Heading>\n        <Box direction=\"row\" gap=\"small\">\n          <Button icon={<FormAdd />} plain />\n          <DropButton icon={<More />} plain />\n        </Box>\n      </Box>\n      <Box gap=\"medium\">\n        {tasks?.map((task) => {\n          return <ProjectBoardTask key={task?.id} {...task} />;\n        })}\n      </Box>\n    </Card>\n  );\n}\n\nfunction ProjectBoardTask({\n  attachments,\n  comments,\n  dueDate,\n  labels,\n  owner,\n  title,\n}) {\n  return (\n    <Card background=\"white\" elevation=\"none\">\n      <CardHeader pad={{ horizontal: 'medium', vertical: 'small' }}>\n        <Box direction=\"row\" justify=\"between\" align=\"center\" gap=\"small\">\n          <Clock size=\"small\" />\n          <Text>{moment(dueDate).format('MMM Do')}</Text>\n        </Box>\n\n        <Button label={<Trash size=\"small\" />} plain />\n      </CardHeader>\n      <CardBody pad={{ horizontal: 'medium', bottom: 'small' }} gap=\"small\">\n        <Heading level={5} margin=\"none\">\n          {title}\n        </Heading>\n        <Box direction=\"row\" gap=\"xsmall\">\n          {labels.map((label) => (\n            <Text key={label?.id} size=\"xsmall\">\n              {label?.name}\n            </Text>\n          ))}\n        </Box>\n      </CardBody>\n      <CardFooter\n        pad={{ horizontal: 'medium', vertical: 'small' }}\n        background=\"light-1\"\n      >\n        <Box direction=\"row\" align=\"baseline\" justify=\"start\" gap=\"small\">\n          <Text size=\"small\">\n            <Attachment size=\"small\" /> {attachments?.length}\n          </Text>\n          <Text size=\"small\">\n            <Chat size=\"small\" /> {comments?.length}\n          </Text>\n        </Box>\n        <Box>\n          {owner ? (\n            <Avatar src={owner?.profile} size=\"small\" />\n          ) : (\n            <Button icon={<UserAdd size=\"small\" />} plain />\n          )}\n        </Box>\n      </CardFooter>\n    </Card>\n  );\n}\n\nexport default function ProjectBoard({\n  match: {\n    params: { projectId },\n  },\n}) {\n  const { project, projectTasksByStatusId, openProject } = useProjectManager();\n\n  useEffect(() => {\n    openProject(projectId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectId]);\n\n  if (!project) {\n    return <Paragraph>Loading…</Paragraph>;\n  }\n\n  return (\n    <Box\n      className=\"ProjectBoard\"\n      direction=\"row\"\n      justify=\"stretch\"\n      pad=\"medium\"\n      gap=\"large\"\n      fill\n    >\n      {project?.statuses?.map((status) => {\n        return (\n          <ProjectBoardStatusColumn\n            key={status?.id}\n            {...status}\n            tasks={projectTasksByStatusId[status?.id]}\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","filepath":"ProjectBoard.js","filename":"ProjectBoard.js","directory":".","app":"ProjectManager"},{"content":"import React, { lazy, Suspense } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nexport default function ProjectManager() {\n  const ProjectsDashboard = lazy(() => import('./ProjectsDashboard'));\n  const ProjectBoard = lazy(() => import('./ProjectBoard'));\n  const { path } = useRouteMatch();\n\n  return (\n    <Suspense fallback={<p>loading route…</p>}>\n      <Switch>\n        <Route component={ProjectsDashboard} path={path} exact />\n        <Route component={ProjectBoard} path={`${path}/:projectId`} />\n      </Switch>\n    </Suspense>\n  );\n}\n","filepath":"ProjectManager.js","filename":"ProjectManager.js","directory":".","app":"ProjectManager"},{"content":"import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n  Anchor,\n  Avatar,\n  Box,\n  Button,\n  DropButton,\n  Grid,\n  Heading,\n  Meter,\n  Select,\n  Text,\n  TextInput,\n} from 'grommet';\nimport { More, Search } from 'grommet-icons';\nimport useProjectManager from './useProjectManager';\n\nfunction ProjectShort({ id, name, type, category, progress, ...props }) {\n  const location = useLocation();\n  const history = useHistory();\n  return (\n    <Box flex={false} {...props}>\n      <Grid\n        pad=\"medium\"\n        gap=\"medium\"\n        columns={['auto', 'flex', 'small', 'small', 'small', 'xxsmall']}\n        align=\"center\"\n      >\n        <Box>\n          <Avatar background=\"brand\" height=\"12px\" width=\"24px\">\n            {name[0]}\n          </Avatar>\n        </Box>\n        <Box>\n          <Anchor\n            href={`${location.pathname}/${id}`}\n            onClick={(event) => {\n              event.preventDefault();\n              history.push(`${location.pathname}/${id}`);\n            }}\n          >\n            <Text weight=\"bold\">{name}</Text>\n          </Anchor>\n        </Box>\n        <Box>\n          <Meter type=\"bar\" values={[{ value: progress }]} />\n        </Box>\n        <Box>{category?.name}</Box>\n        <Box>{type}</Box>\n        <Box>\n          <DropButton\n            icon={<More />}\n            dropAlign={{ top: 'bottom', right: 'right' }}\n            dropContent={<Box pad=\"large\" background=\"light-2\" />}\n          />\n        </Box>\n      </Grid>\n    </Box>\n  );\n}\nexport default function ProjectDashboard() {\n  const { projects, categoriesById, projectTypes } = useProjectManager();\n  const currentType = 'All';\n  const onCreate = () => {};\n  return (\n    <Box className=\"ProjectManager\" pad=\"medium\" fill>\n      <Box>\n        <Box\n          direction=\"row\"\n          justify=\"between\"\n          align=\"center\"\n          pad=\"medium\"\n          flex={false}\n        >\n          <Heading level={4} margin=\"none\">\n            Projects\n          </Heading>\n          <Button label=\"Create\" onClick={onCreate} primary />\n        </Box>\n        <Box direction=\"row\" justify=\"between\" pad=\"medium\" flex={false}>\n          <Box flex>\n            <TextInput placeholder=\"Search…\" icon={<Search />} plain />\n          </Box>\n          <Box direction=\"row\">\n            <Select options={['All', ...projectTypes]} value={currentType} />\n          </Box>\n        </Box>\n        <Box overflow=\"auto\">\n          {projects.map((project, index) => {\n            return (\n              <ProjectShort\n                key={project.id}\n                {...project}\n                category={categoriesById[project?.category]}\n                border={index ? { side: 'top' } : null}\n              />\n            );\n          })}\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","filepath":"ProjectsDashboard.js","filename":"ProjectsDashboard.js","directory":".","app":"ProjectManager"},{"content":"export { default } from './ProjectManager'\n","filepath":"index.js","filename":"index.js","directory":".","app":"ProjectManager"},{"content":"import { useMemo, useState } from 'react';\nimport { chain } from 'lodash';\nimport * as config from './config';\nexport default function useDashboard() {\n  const [projects] = useState(config?.projects);\n  const [categories] = useState(config?.categories);\n  const [statuses] = useState(config?.statuses);\n  const [tasks] = useState(config?.tasks);\n  const [projectId, setProjectId] = useState();\n  const projectTypes = useMemo(() => {\n    return chain(projects).uniqBy('type').map('type').value();\n  }, [projects]);\n  const categoriesById = useMemo(() => {\n    return chain(categories).keyBy('id').value();\n  }, [categories]);\n  const projectsById = useMemo(() => {\n    return chain(projects).keyBy('id').value();\n  }, [projects]);\n  const project = useMemo(() => {\n    return projectsById[projectId];\n  }, [projectId, projectsById]);\n  const tasksByProjectId = useMemo(() => {\n    return chain(tasks).groupBy('projectId').value();\n  }, [tasks]);\n  const projectTasks = useMemo(() => {\n    return tasksByProjectId?.[projectId];\n  }, [projectId, tasksByProjectId]);\n  const projectTasksByStatusId = useMemo(() => {\n    return chain(projectTasks).groupBy('statusId').value();\n  }, [projectTasks]);\n\n  return useMemo(() => {\n    function openProject(id) {\n      setProjectId(id);\n    }\n    return {\n      project,\n      projectId,\n      categories,\n      categoriesById,\n      projects,\n      projectTasks,\n      projectTasksByStatusId,\n      projectTypes,\n      statuses,\n      tasks,\n      tasksByProjectId,\n      openProject,\n    };\n  }, [\n    project,\n    projectId,\n    categories,\n    categoriesById,\n    projects,\n    projectTasks,\n    projectTasksByStatusId,\n    projectTypes,\n    statuses,\n    tasks,\n    tasksByProjectId,\n  ]);\n}\n","filepath":"useProjectManager.js","filename":"useProjectManager.js","directory":".","app":"ProjectManager"},{"content":"import * as users from './users';\n\nexport const categories = [\n  { id: 'category-1', name: 'Accounting' },\n  { id: 'category-2', name: 'Engineering' },\n  { id: 'category-3', name: 'Marketing' },\n  { id: 'category-4', name: 'Sales' },\n];\n\nexport const labels = [\n  { id: 'label-1', name: 'Label 1', color: 'red' },\n  { id: 'label-2', name: 'Label 2', color: 'orange' },\n  { id: 'label-3', name: 'Label 3', color: 'blue' },\n  { id: 'label-4', name: 'Label 4', color: 'yellow' },\n  { id: 'label-5', name: 'Label 5', color: 'green' },\n];\n\nexport const statuses = [\n  { id: 'status-1', name: 'Inbox' },\n  { id: 'status-2', name: 'Active' },\n  { id: 'status-3', name: 'Complete' },\n];\n\nexport const tasks = [\n  {\n    id: 'task-1',\n    projectId: 'project-1',\n    title: 'example task #1',\n    description:\n      'A longer and more verbose description for example description for task #1',\n    attachments: [],\n    comments: [],\n    history: [],\n    labels: [labels[1], labels[2]],\n    ownerId: 'user-1',\n    owner: users.user1,\n    dueDate: 1599135995778,\n    statusId: 'status-1',\n  },\n  {\n    id: 'task-2',\n    projectId: 'project-1',\n    title: 'example task #2',\n    description:\n      'A longer and more verbose description for example description for task #1',\n    attachments: [],\n    comments: [],\n    history: [],\n    labels: [labels[3], labels[4]],\n    ownerId: null,\n    owner: null,\n    dueDate: 1599135995778,\n    statusId: 'status-1',\n  },\n];\n\nexport const projects = [\n  {\n    id: 'project-1',\n    name: 'Release new website',\n    type: 'Public',\n    category: 'category-3',\n    progress: 50,\n    tasks,\n    statuses,\n  },\n  {\n    id: 'project-2',\n    name: 'Build new product',\n    type: 'Private',\n    category: 'category-2',\n    progress: 75,\n    tasks: [],\n    statuses: [],\n  },\n  {\n    id: 'project-3',\n    name: 'Launch email campaign',\n    type: 'Private',\n    category: 'category-3',\n    progress: 75,\n    tasks: [],\n    statuses: [],\n  },\n  {\n    id: 'project-4',\n    name: 'Consolidate sales reports',\n    type: 'Private',\n    category: 'category-4',\n    progress: 75,\n    tasks: [],\n    statuses: [],\n  },\n];\n","filepath":"config/config.js","filename":"config.js","directory":"config","app":"ProjectManager"},{"content":"export * from './config';\n","filepath":"config/index.js","filename":"index.js","directory":"config","app":"ProjectManager"},{"content":"const { PUBLIC_URL } = process.env;\n\nexport const user1 = {\n  id: 'user-1',\n  username: 'johnd',\n  firstName: 'John',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy1.jpg`,\n  company: 'That Company Inc.',\n\n  email: 'johnd@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user2 = {\n  id: 'user-2',\n  username: 'janed',\n  firstName: 'Jane',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl1.jpg`,\n  company: 'Some Company Inc.',\n\n  email: 'janed@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user3 = {\n  id: 'user-3',\n  username: 'bills',\n  firstName: 'Bill',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy2.jpg`,\n  company: 'Another Company Inc.',\n\n  email: 'bills@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user4 = {\n  id: 'user-4',\n  username: 'suzyq',\n  firstName: 'Suzy',\n  lastName: 'Q',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl2.jpg`,\n  company: 'Not A Company Inc.',\n\n  email: 'suzyq@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user5 = {\n  id: 'user-5',\n  username: 'mikes',\n  firstName: 'Mike',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy3.jpg`,\n  company: 'Same Company Inc.',\n\n  email: 'mikes@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user6 = {\n  id: 'user-6',\n  username: 'saraht',\n  firstName: 'Sarah',\n  lastName: 'T',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl3.jpg`,\n  company: 'Should Be A Company Inc.',\n\n  email: 'saraht@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user7 = {\n  id: 'user-7',\n  username: 'markw',\n  firstName: 'Mark',\n  lastName: 'W',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy4.jpg`,\n  company: 'Was A Company Inc.',\n\n  email: 'markw@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n","filepath":"config/users.js","filename":"users.js","directory":"config","app":"ProjectManager"}]}
