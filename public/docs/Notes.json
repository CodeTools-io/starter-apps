{"files":[{"content":"import React, { useMemo, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Form,\n  Grid,\n  Heading,\n  Markdown,\n  Text,\n  TextInput,\n  TextArea,\n} from 'grommet';\n\nimport useNotes from './useNotes';\n\nfunction NoteList({ notes, currentNoteId, openNote }) {\n  return (\n    <Box>\n      {notes.map((note) => {\n        return (\n          <Box\n            key={note.id}\n            background={currentNoteId === note.id ? 'light-1' : null}\n            pad={{ vertical: 'small', horizontal: 'medium' }}\n            onClick={() => openNote(note.id)}\n          >\n            <Text>{note.title}</Text>\n\n            <Text size=\"small\" color=\"dark-6\">\n              {note.category}\n            </Text>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n}\n\nfunction Note({\n  id,\n  authorId,\n  title,\n  body,\n  category,\n  editNote,\n  currentNoteId,\n}) {\n  if (!id) {\n    return null;\n  }\n\n  return (\n    <Box>\n      <Box gap=\"small\">\n        <Heading level={4} margin=\"none\">\n          {title}\n        </Heading>\n        <Text size=\"small\">{category}</Text>\n        <Markdown>{body}</Markdown>\n      </Box>\n    </Box>\n  );\n}\n\nfunction NoteForm({\n  id,\n  authorId,\n  title,\n  body,\n  category,\n  cancelEditNote,\n  saveNote,\n}) {\n  const initialFields = { id, authorId, title, body, category };\n  const [fields, setFields] = useState(initialFields);\n  const hasChanges = useMemo(() => {\n    return Object.entries(fields).some(([field, value]) => {\n      return value !== initialFields[field];\n    });\n  }, [fields, initialFields]);\n  return (\n    <Form\n      value={fields}\n      onChange={(updates) => {\n        setFields(updates);\n      }}\n    >\n      <Box gap=\"medium\">\n        <Box>\n          <TextInput label=\"title\" name=\"title\" placeholder=\"Enter title\" />\n        </Box>\n\n        <Box>\n          <TextInput\n            label=\"category\"\n            name=\"category\"\n            placeholder=\"Enter category\"\n          />\n        </Box>\n\n        <Box height=\"medium\">\n          <TextArea\n            placeholder=\"Enter noteâ€¦\"\n            label=\"body\"\n            name=\"body\"\n            resize={false}\n            fill\n          />\n        </Box>\n\n        <Box direction=\"row\" justify=\"end\" align=\"center\" gap=\"small\">\n          <Button label=\"Cancel\" onClick={() => cancelEditNote(id)} />\n          <Button\n            label=\"Save\"\n            onClick={() => saveNote(fields)}\n            disabled={!hasChanges}\n            primary\n          />\n        </Box>\n      </Box>\n    </Form>\n  );\n}\nexport default function Notes({ children, ...props }) {\n  const {\n    notes,\n    isEditMode,\n    currentNote,\n    currentNoteId,\n    openNote,\n    cancelEditNote,\n    editNote,\n    addNote,\n    saveNote,\n    searchNotes,\n    clearNoteSearch,\n    noteSearchResults,\n    noteSearch,\n  } = useNotes();\n\n  return (\n    <Grid\n      columns={['1/4', '1/4', '1/4', '1/4']}\n      rows={['auto', 'flex', 'auto']}\n      areas={[\n        ['NotesSearch', 'NotesHeader', 'NotesHeader', 'NotesHeader'],\n        ['NotesSidebar', 'NotesMain', 'NotesMain', 'NotesMain'],\n        ['NotesNew', 'NotesMain', 'NotesMain', 'NotesMain'],\n      ]}\n      fill\n    >\n      <Box\n        gridArea=\"NotesSearch\"\n        pad=\"medium\"\n        border={[{ side: 'right' }, { side: 'bottom' }]}\n      >\n        <TextInput\n          onChange={(e) => searchNotes(e.target.value)}\n          onSelect={(e) => {\n            openNote(e.suggestion.value);\n            clearNoteSearch();\n          }}\n          placeholder=\"Search notes\"\n          suggestions={noteSearchResults}\n          value={noteSearch}\n          plain\n        />\n      </Box>\n\n      <Box\n        gridArea=\"NotesHeader\"\n        pad=\"medium\"\n        direction=\"row\"\n        justify=\"end\"\n        align=\"center\"\n      >\n        {currentNoteId && !isEditMode ? (\n          <Button\n            label=\"Edit\"\n            onClick={() => editNote(currentNoteId)}\n            primary\n          />\n        ) : null}\n      </Box>\n\n      <Box gridArea=\"NotesSidebar\" pad=\"none\" border={[{ side: 'right' }]}>\n        <NoteList\n          notes={notes}\n          currentNoteId={currentNoteId}\n          openNote={openNote}\n        />\n      </Box>\n      <Box\n        gridArea=\"NotesNew\"\n        pad=\"medium\"\n        border={[{ side: 'right' }, { side: 'top' }]}\n      >\n        <Button label=\"New\" onClick={() => addNote(currentNoteId)} primary />\n      </Box>\n      <Box gridArea=\"NotesMain\" pad=\"medium\">\n        {isEditMode ? (\n          <NoteForm\n            {...currentNote}\n            saveNote={saveNote}\n            cancelEditNote={cancelEditNote}\n          />\n        ) : (\n          <Note\n            {...currentNote}\n            editNote={editNote}\n            currentNoteId={currentNoteId}\n          />\n        )}\n      </Box>\n    </Grid>\n  );\n}\n","filename":"Notes.js","app":"Notes"},{"content":"export { default } from './Notes'\n","filename":"index.js","app":"Notes"},{"content":"import { useMemo, useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport * as config from './config';\nexport default function useNotes() {\n  const [notes, setNotes] = useState(config?.notes);\n  const [noteSearch, setNoteSearch] = useState();\n  const [isEditMode, setIsEditMode] = useState(false);\n  const [currentNoteId, setCurrentNoteId] = useState();\n  const currentNote = useMemo(() => {\n    return notes.find((note) => note.id === currentNoteId);\n  }, [notes, currentNoteId]);\n  const noteSearchResults = useMemo(() => {\n    const queryValue = noteSearch?.trim?.()?.toLowerCase?.();\n    const searchableFields = ['title', 'body', 'category'];\n\n    if (!queryValue) {\n      return [];\n    }\n\n    return notes\n      ?.filter((note) => {\n        return searchableFields.some((searchableField) => {\n          return note?.[searchableField]\n            ?.toLowerCase?.()\n            ?.includes?.(queryValue);\n        });\n      })\n      .map((result) => {\n        return {\n          label: `${result?.title}`,\n          value: result?.id,\n        };\n      });\n  }, [notes, noteSearch]);\n  return useMemo(() => {\n    function openNote(id) {\n      setCurrentNoteId(id);\n      setIsEditMode(false);\n    }\n\n    function editNote(id) {\n      setCurrentNoteId(id);\n      setIsEditMode(true);\n    }\n\n    function cancelEditNote(id) {\n      setCurrentNoteId(id);\n      setIsEditMode(false);\n    }\n\n    function closeNote(id) {\n      setCurrentNoteId(null);\n      setIsEditMode(false);\n    }\n\n    function addNote() {\n      const id = uuid();\n      setNotes([\n        ...notes,\n        {\n          id,\n          authorId: 'user-1',\n          title: 'Untitled Note',\n          body: '',\n          category: 'General',\n        },\n      ]);\n      editNote(id);\n    }\n\n    function saveNote(note) {\n      setNotes(\n        notes.map((n) => {\n          if (n.id !== note.id) {\n            return n;\n          }\n\n          return note;\n        })\n      );\n      setIsEditMode(false);\n    }\n    function searchNotes(value) {\n      setNoteSearch(value);\n    }\n    function clearNoteSearch() {\n      setNoteSearch('');\n    }\n    return {\n      notes: notes,\n      currentNote,\n      currentNoteId,\n      isEditMode,\n      openNote,\n      editNote,\n      cancelEditNote,\n      closeNote,\n      addNote,\n      saveNote,\n      noteSearch,\n      searchNotes,\n      clearNoteSearch,\n      noteSearchResults,\n    };\n  }, [\n    notes,\n    currentNote,\n    currentNoteId,\n    isEditMode,\n    noteSearch,\n    noteSearchResults,\n  ]);\n}\n","filename":"useNotes.js","app":"Notes"}]}
