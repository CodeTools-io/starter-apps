{"files":[{"content":".AppShellNavLink {\n  opacity: 0.85;\n}\n.AppShellNavLink.active {\n  opacity: 1;\n}\n.AppShellNavLink:hover {\n  opacity: 1;\n}\n.AppShellNavLink svg path {\n  stroke: currentColor;\n}\n","filepath":"AppShell.css","filename":"AppShell.css","directory":".","context":"AppShell"},{"content":"import React from 'react';\nimport { Grid } from 'grommet';\nimport * as config from './config';\nimport useAppShell from './useAppShell';\nimport AppShellHeader from './AppShellHeader';\nimport AppShellMain from './AppShellMain';\nimport AppShellSidebar from './AppShellSidebar';\n\nimport './AppShell.css';\n\nexport default function AppShell({ children, ...props }) {\n  const { authHandler, authLabel, user, userInitials } = useAppShell();\n\n  return (\n    <Grid\n      className=\"AppShellContainer\"\n      rows={['xsmall', 'auto']}\n      columns={['1/4', '1/4', '1/4', '1/4']}\n      areas={[\n        ['header', 'header', 'header', 'header'],\n        ['sidebar', 'main', 'main', 'main'],\n      ]}\n      fill\n    >\n      <AppShellHeader\n        authHandler={authHandler}\n        authLabel={authLabel}\n        logo={config?.site.logo}\n        logoSmall={config?.site.logoSmall}\n        userInitials={userInitials}\n        userProfile={user?.profile}\n        siteName={config?.site?.name}\n      />\n      <AppShellSidebar />\n      <AppShellMain>{children}</AppShellMain>\n    </Grid>\n  );\n}\n","filepath":"AppShell.js","filename":"AppShell.js","directory":".","context":"AppShell"},{"content":"import React from 'react';\nimport { Box, Grid, Header } from 'grommet';\nimport AppShellLogo from './AppShellLogo';\nimport AppShellSearch from './AppShellSearch';\nimport AppShellNotifications from './AppShellNotifications';\nimport AppShellMenu from './AppShellMenu';\n\nexport default function AppShellHeader({\n  authHandler = () => {},\n  authLabel,\n  logo,\n  logoSmall,\n  searchHandler = () => {},\n  siteName,\n  userProfile,\n  userInitials,\n}) {\n  return (\n    <Header gridArea=\"header\" className=\"AppShellHeader\">\n      <Grid\n        columns={['1/4', '3/4']}\n        rows={['auto']}\n        areas={[['logo', 'menu']]}\n        align=\"center\"\n        fill\n      >\n        <AppShellLogo\n          text={siteName}\n          logo={logo}\n          logoSmall={logoSmall}\n          height={{ max: '100%' }}\n          width={{ max: '100%' }}\n        />\n        <Box\n          gridArea=\"menu\"\n          direction=\"row\"\n          justify=\"end\"\n          pad=\"medium\"\n          gap=\"medium\"\n        >\n          <AppShellSearch searchHandler={searchHandler} />\n          <AppShellNotifications />\n          <AppShellMenu\n            authHandler={authHandler}\n            authLabel={authLabel}\n            userInitials={userInitials}\n            userProfile={userProfile}\n          />\n        </Box>\n      </Grid>\n    </Header>\n  );\n}\n","filepath":"AppShellHeader.js","filename":"AppShellHeader.js","directory":".","context":"AppShell"},{"content":"import React, { useContext, useMemo } from 'react';\nimport { Box, Heading, Image, ResponsiveContext } from 'grommet';\n\nexport default function AppShellLogo({\n  background = 'brand-3',\n  text,\n  logo,\n  logoSmall,\n  ...props\n}) {\n  const showText = !logo && text;\n  const size = useContext(ResponsiveContext);\n  const style = useMemo(() => {\n    if (size === 'small') {\n      return { maxHeight: '32px', maxWidth: '100%' };\n    }\n    return { maxHeight: '100%', maxWidth: '100%' };\n  }, [size]);\n  return (\n    <Box\n      className=\"AppShellLogo\"\n      background={background}\n      gridArea=\"logo\"\n      pad=\"medium\"\n      justify=\"center\"\n      fill\n      {...props}\n    >\n      {showText ? (\n        <Heading level=\"3\" textAlign=\"center\" color=\"white\">\n          {text}\n        </Heading>\n      ) : (\n        <Image\n          src={size === 'small' ? logoSmall : logo}\n          fit=\"contain\"\n          style={style}\n        />\n      )}\n    </Box>\n  );\n}\n","filepath":"AppShellLogo.js","filename":"AppShellLogo.js","directory":".","context":"AppShell"},{"content":"import React from 'react';\nimport { Main } from 'grommet';\n\nexport default function AppShellMain({ children }) {\n  return (\n    <Main\n      className=\"AppShellMain\"\n      gridArea=\"main\"\n      align=\"start\"\n      background=\"light-1\"\n      pad={{ horizontal: 'medium', vertical: 'medium' }}\n      overflow={{ vertical: 'auto' }}\n    >\n      {children}\n    </Main>\n  );\n}\n","filepath":"AppShellMain.js","filename":"AppShellMain.js","directory":".","context":"AppShell"},{"content":"import React from 'react';\nimport { Avatar, Box, DropButton, Text } from 'grommet';\n\nexport default function AppShellMenu({\n  authHandler,\n  authLabel,\n  userInitials,\n  userProfile,\n}) {\n  return (\n    <DropButton\n      className=\"AppShellMenu\"\n      icon={\n        <Avatar background=\"brand\" src={userProfile}>\n          {userInitials}\n        </Avatar>\n      }\n      dropAlign={{ top: 'bottom', right: 'right' }}\n      dropContent={\n        <Box pad=\"medium\">\n          <Text onClick={authHandler}>{authLabel}</Text>\n        </Box>\n      }\n    />\n  );\n}\n","filepath":"AppShellMenu.js","filename":"AppShellMenu.js","directory":".","context":"AppShell"},{"content":"import React, { useContext, useMemo } from 'react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport classNames from 'classnames';\nimport {\n  Box,\n  Collapsible,\n  Nav,\n  ResponsiveContext,\n  Text,\n  ThemeContext,\n} from 'grommet';\nimport { Down, Up } from 'grommet-icons';\n\nimport * as config from './config';\n\nfunction AppShellNavSection({ id, name, routes }) {\n  return (\n    <Box className=\"AppShellNavSection\" gap=\"small\">\n      <Box pad={{ horizontal: 'medium' }}>\n        <Text weight=\"bold\">{name}</Text>\n      </Box>\n      <Box gap=\"none\">\n        {routes?.map((route) => (\n          <AppShellNavItem key={route.id} {...route} />\n        ))}\n      </Box>\n    </Box>\n  );\n}\n\nfunction AppShellNavItem({\n  id,\n  path,\n  icon,\n  label,\n  menuBackground = 'brand-2',\n  routes,\n  isNested = false,\n  ...rest\n}) {\n  const size = useContext(ResponsiveContext);\n  const [nav, setNav] = useLocalStorage('nav', {});\n  const isExpanded = useMemo(() => {\n    if (size === 'small') {\n      return true;\n    }\n\n    return nav?.[id];\n  }, [id, nav, size]);\n\n  function toggleMenu() {\n    setNav({\n      ...nav,\n      [id]: !nav?.[id],\n    });\n  }\n\n  if (!routes) {\n    return (\n      <AppShellNavLink\n        to={path}\n        icon={icon}\n        label={label}\n        isNested={isNested}\n        {...rest}\n      />\n    );\n  }\n\n  return (\n    <Box gap=\"xsmall\">\n      <Box>\n        <AppShellNavLink\n          icon={icon}\n          secondaryIcon={\n            isExpanded ? <Up size=\"small\" /> : <Down size=\"small\" />\n          }\n          label={label}\n          to={path}\n          onClick={(e) => {\n            e.preventDefault();\n            toggleMenu();\n          }}\n          isNested={isNested}\n          {...rest}\n        />\n      </Box>\n      <Collapsible direction=\"vertical\" open={isExpanded}>\n        <Box gap=\"xsmall\" background={menuBackground} fill=\"horizontal\">\n          {routes.map((route) => {\n            return <AppShellNavItem key={route.id} {...route} isNested />;\n          })}\n        </Box>\n      </Collapsible>\n    </Box>\n  );\n}\n\nfunction AppShellNavLink({\n  activeBackground = 'brand-4',\n  children,\n  to,\n  icon,\n  secondaryIcon,\n  label,\n  color,\n  size = 'large',\n  weight = 'normal',\n  onClick = (event) => {},\n  isNested,\n  ...props\n}) {\n  const theme = useContext(ThemeContext);\n  const screenSize = useContext(ResponsiveContext);\n  const className = classNames({\n    AppShellNavLink: true,\n    'is-small': screenSize === 'small',\n  });\n  return (\n    <RouterNavLink\n      className={className}\n      to={to}\n      style={{\n        ...theme.anchor,\n        fontWeight: 'normal',\n        color: theme.global.colors['brand-contrast'],\n      }}\n      activeStyle={{\n        ...theme.anchor,\n        fontWeight: 'bold',\n        color: theme.global.colors['brand-contrast'],\n      }}\n      onClick={onClick}\n      exact\n      strict\n      {...props}\n    >\n      <Box\n        direction=\"row\"\n        align=\"center\"\n        pad={{\n          horizontal: 'medium',\n          vertical: 'small',\n        }}\n        gap=\"medium\"\n      >\n        {icon && (\n          <Box className=\"NavLink__icon\">\n            <Text color={theme.global.colors['brand-contrast']}>{icon}</Text>\n          </Box>\n        )}\n\n        {label && (\n          <Box\n            className=\"NavLink__label\"\n            margin={{ left: isNested ? 'medium' : 'none' }}\n            flex\n          >\n            <Text\n              color={color}\n              size={size}\n              margin={{ left: isNested ? 'medium' : 'none' }}\n              truncate\n            >\n              {label}\n            </Text>\n          </Box>\n        )}\n\n        {secondaryIcon && (\n          <Box className=\"NavLink__secondaryIcon\">\n            <Text color={theme.global.colors['brand-contrast']}>\n              {secondaryIcon}\n            </Text>\n          </Box>\n        )}\n      </Box>\n    </RouterNavLink>\n  );\n}\n\nexport default function AppShellNav() {\n  return (\n    <Nav className=\"AppShellNav\" gap=\"medium\">\n      {config?.nav?.sections?.map((section) => (\n        <AppShellNavSection key={section.id} {...section} />\n      ))}\n    </Nav>\n  );\n}\n","filepath":"AppShellNav.js","filename":"AppShellNav.js","directory":".","context":"AppShell"},{"content":"import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardBody,\n  CardHeader,\n  DropButton,\n  Heading,\n  Stack,\n  Text,\n} from 'grommet';\nimport useAppShell from './useAppShell';\n\nfunction Icon({ icon, color = 'text', size = 'medium', ...props }) {\n  const Component = icon;\n  return (\n    <Box {...props}>\n      <Component color={color} size={size} />\n    </Box>\n  );\n}\n\nfunction AppShellNotification({ category, notifications = [] }) {\n  return (\n    <DropButton\n      icon={\n        <AppShellNotificationIndicator\n          icon={category?.icon}\n          count={notifications?.length}\n        />\n      }\n      dropAlign={{ top: 'bottom', right: 'right' }}\n      dropContent={\n        <AppShellNotificationMenu\n          category={category}\n          notifications={notifications}\n        />\n      }\n      dropProps={{\n        plain: true,\n        overflow: 'visible',\n      }}\n    />\n  );\n}\n\nfunction AppShellNotificationIndicator({ icon, count }) {\n  return (\n    <Box>\n      <Stack anchor=\"top-right\">\n        <Icon icon={icon} color=\"brand-3\" />\n        <Box\n          align=\"center\"\n          justify=\"center\"\n          background=\"brand\"\n          pad={{ horizontal: 'xsmall' }}\n          width={{ min: '18px' }}\n          height={{ min: '18px' }}\n          margin={{ top: '-7px', right: '-7px' }}\n          round\n        >\n          <Text size=\"xsmall\" color=\"brand-contrast\">\n            {count}\n          </Text>\n        </Box>\n      </Stack>\n    </Box>\n  );\n}\n\nfunction AppShellNotificationMenu({ category, notifications }) {\n  return (\n    <Card width=\"medium\">\n      <CardHeader pad=\"small\" background=\"white\">\n        <Heading level={5} margin=\"none\">\n          {category?.name}\n        </Heading>\n      </CardHeader>\n      <CardBody pad=\"small\" background=\"light-1\">\n        {notifications.map((notification) => {\n          return (\n            <AppShellNotificationMenuItem\n              key={notification.id}\n              {...notification}\n            />\n          );\n        })}\n      </CardBody>\n    </Card>\n  );\n}\n\nfunction AppShellNotificationMenuItem({\n  description,\n  id,\n  image,\n  metadata,\n  title,\n}) {\n  return (\n    <Box direction=\"row\" align=\"start\" gap=\"small\">\n      {image ? <Avatar src={image} /> : null}\n      <Box gap=\"xsmall\" flex>\n        <Box direction=\"row\" align=\"center\" justify=\"between\" gap=\"xsmall\">\n          {title ? (\n            <Heading level={6} margin=\"none\">\n              {title}\n            </Heading>\n          ) : null}\n          {metadata ? (\n            <Text size=\"xsmall\" color=\"dark-6\">\n              {metadata}\n            </Text>\n          ) : null}\n        </Box>\n        {description ? (\n          <Text size=\"small\" color=\"dark-3\">\n            {description}\n          </Text>\n        ) : null}\n      </Box>\n    </Box>\n  );\n}\nexport default function AppShellNotifications() {\n  const { categories, notificationsByCategoryId } = useAppShell();\n  return (\n    <Box\n      className=\"AppShellNotifications\"\n      direction=\"row\"\n      justify=\"end\"\n      pad=\"medium\"\n      gap=\"medium\"\n    >\n      {categories.map((category) => {\n        return (\n          <AppShellNotification\n            key={category?.id}\n            category={category}\n            notifications={notificationsByCategoryId[category?.id]}\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","filepath":"AppShellNotifications.js","filename":"AppShellNotifications.js","directory":".","context":"AppShell"},{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { Box, DropButton, TextInput } from 'grommet';\nimport { Search } from 'grommet-icons';\n\nexport default function AppShellSearch({ searchHandler }) {\n  const searchInput = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    if (isOpen) {\n      setTimeout(() => searchInput.current.focus(), 0);\n    }\n  }, [isOpen]);\n  return (\n    <DropButton\n      className=\"AppShellSearch\"\n      icon={<Search color=\"text\" />}\n      dropAlign={{ right: 'left' }}\n      dropContent={\n        <Box direction=\"row\" pad={{ vertical: 'small' }}>\n          <TextInput\n            ref={searchInput}\n            placeholder=\"Search…\"\n            name=\"search\"\n            type=\"search\"\n          />\n        </Box>\n      }\n      dropProps={{\n        elevation: 'none',\n      }}\n      onClose={() => setIsOpen(false)}\n      onOpen={() => setIsOpen(true)}\n    />\n  );\n}\n","filepath":"AppShellSearch.js","filename":"AppShellSearch.js","directory":".","context":"AppShell"},{"content":"import React from 'react';\nimport { Box, Sidebar } from 'grommet';\nimport AppShellNav from './AppShellNav.js';\n\nexport default function AppShellSidebar({ background = 'brand-3' }) {\n  return (\n    <Sidebar\n      className=\"AppShellSidebar\"\n      gridArea=\"sidebar\"\n      background={background}\n      pad={{ horizontal: 'none', vertical: 'medium' }}\n      overflow={{ vertical: 'auto' }}\n    >\n      <Box>\n        <AppShellNav />\n      </Box>\n    </Sidebar>\n  );\n}\n","filepath":"AppShellSidebar.js","filename":"AppShellSidebar.js","directory":".","context":"AppShell"},{"content":"export { default } from './AppShell'\n","filepath":"index.js","filename":"index.js","directory":".","context":"AppShell"},{"content":"import { useMemo, useState } from 'react';\nimport * as config from './config';\nimport { chain } from 'lodash';\n\nexport default function useAppShell() {\n  const [isAuthenticated, setIsAuthenticated] = useState(true);\n  const [user, setUser] = useState(config?.user);\n  const [notifications] = useState(config?.notifications);\n  const [categories] = useState(config?.categories);\n\n  const authLabel = useMemo(() => {\n    return isAuthenticated ? 'logout' : 'login';\n  }, [isAuthenticated]);\n\n  const notificationsByCategoryId = useMemo(\n    () => chain(notifications).groupBy('categoryId').value(),\n    [notifications]\n  );\n\n  const userInitials = useMemo(() => {\n    if (user) {\n      return `${user?.firstName[0]}${user?.lastName[0]}`;\n    }\n\n    return null;\n  }, [user]);\n\n  return useMemo(() => {\n    function authHandler() {\n      if (isAuthenticated) {\n        logout();\n      } else {\n        login();\n      }\n    }\n\n    function login() {\n      setIsAuthenticated(true);\n      setUser(config?.user);\n    }\n\n    function logout() {\n      setIsAuthenticated(false);\n      setUser(null);\n    }\n\n    return {\n      authHandler,\n      authLabel,\n      isAuthenticated,\n      login,\n      logout,\n      notifications,\n      notificationsByCategoryId,\n      categories,\n      user,\n      userInitials,\n    };\n  }, [\n    authLabel,\n    isAuthenticated,\n    notifications,\n    notificationsByCategoryId,\n    categories,\n    user,\n    userInitials,\n  ]);\n}\n","filepath":"useAppShell.js","filename":"useAppShell.js","directory":".","context":"AppShell"},{"content":"import * as users from './users';\nimport accounting from 'accounting';\nimport moment from 'moment';\nimport { Cart, ChatOption, Notification } from 'grommet-icons';\nexport * from './nav';\nexport * from './site';\nexport * from './theme';\n\nconst currentDate = new Date();\n\nconst { PUBLIC_URL } = process.env;\n\nexport const user = users?.user1;\n\nexport const notifications = [\n  {\n    id: 'notification-1',\n    categoryId: 'task',\n    title: 'Groceries',\n    description: 'pick up some milk',\n    link: '',\n  },\n  {\n    id: 'notification-2',\n    categoryId: 'chat',\n    title: `${users?.user4?.firstName} ${users?.user4?.lastName}`,\n    description: 'Hey! How are you?',\n    image: users?.user4?.profile,\n    metadata: moment(1598102365284).fromNow(),\n    link: '',\n  },\n  {\n    id: 'notification-3',\n    categoryId: 'chart',\n    title: 'Coffee (3)',\n    description: `${accounting.formatMoney(10.99 * 3)}`,\n    image: `${PUBLIC_URL}/placeholder/img/food/coffee-1200xauto.jpg`,\n    link: '',\n  },\n];\n\nexport const categories = [\n  { id: 'task', name: 'Task', icon: Notification },\n  { id: 'chat', name: 'Chat', icon: ChatOption },\n  { id: 'chart', name: 'Cart', icon: Cart },\n];\n\nexport const site = {\n  name: 'Placeholder Company',\n  copyrightYear: currentDate.getFullYear(),\n  logo: `${PUBLIC_URL}/placeholder/img/logos/logo-white.png`,\n  logoSmall: `${PUBLIC_URL}/placeholder/img/logos/picmark-white.png`,\n};\n","filepath":"config/config.js","filename":"config.js","directory":"config","context":"AppShell"},{"content":"export * from './config';\n","filepath":"config/index.js","filename":"index.js","directory":"config","context":"AppShell"},{"content":"import React from 'react';\nimport {\n  Alert,\n  Globe,\n  Group,\n  Install,\n  DocumentPerformance,\n  Home,\n  SettingsOption,\n} from 'grommet-icons';\n\nexport const nav = {\n  sections: [\n    {\n      id: 'section-1',\n      name: 'First Section',\n      routes: [\n        {\n          id: 'home',\n          icon: <Home size=\"16px\" />,\n          label: 'Home',\n          path: '/app-shell/home',\n        },\n        {\n          id: 'members',\n          icon: <Group size=\"16px\" />,\n          label: 'Members',\n          path: '/app-shell/members',\n        },\n        {\n          id: 'orders',\n          icon: <Install size=\"16px\" />,\n          label: 'Orders',\n          path: '/app-shell/orders',\n        },\n        {\n          id: 'reports',\n          icon: <DocumentPerformance size=\"16px\" />,\n          label: 'Reports',\n          path: '/app-shell/reports',\n          routes: [\n            {\n              id: 'reports-week',\n              label: 'Weekly',\n              path: '/app-shell/reports/week',\n            },\n            {\n              id: 'reports-month',\n              label: 'Monthly',\n              path: '/app-shell/reports/month',\n            },\n            {\n              id: 'reports-quarter',\n              label: 'Quarterly',\n              path: '/app-shell/reports/quarter',\n            },\n            {\n              id: 'reports-year',\n              label: 'Yearly',\n              path: '/app-shell/reports/year',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      id: 'section-2',\n      name: 'Second Section',\n      routes: [\n        {\n          id: 'alerts',\n          icon: <Alert size=\"16px\" />,\n          label: 'Alerts',\n          path: '/app-shell/alerts',\n        },\n        {\n          id: 'locations',\n          icon: <Globe size=\"16px\" />,\n          label: 'Locations',\n          path: '/app-shell/locations',\n        },\n        {\n          id: 'settings',\n          icon: <SettingsOption size=\"16px\" />,\n          label: 'Settings',\n          path: '/app-shell/settings',\n        },\n      ],\n    },\n  ],\n};\n","filepath":"config/nav.js","filename":"nav.js","directory":"config","context":"AppShell"},{"content":"const currentDate = new Date();\nconst { PUBLIC_URL } = process.env;\nexport const site = {\n  name: 'Placeholder Company',\n  copyrightYear: currentDate.getFullYear(),\n  logo: `${PUBLIC_URL}/placeholder/img/logos/logo-white.png`,\n  logoSmall: `${PUBLIC_URL}/placeholder/img/logos/picmark-white.png`,\n};\n","filepath":"config/site.js","filename":"site.js","directory":"config","context":"AppShell"},{"content":"const { PUBLIC_URL } = process.env;\n\nexport const user1 = {\n  id: 'user-1',\n  username: 'johnd',\n  firstName: 'John',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy1.jpg`,\n  company: 'That Company Inc.',\n\n  email: 'johnd@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user2 = {\n  id: 'user-2',\n  username: 'janed',\n  firstName: 'Jane',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl1.jpg`,\n  company: 'Some Company Inc.',\n\n  email: 'janed@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user3 = {\n  id: 'user-3',\n  username: 'bills',\n  firstName: 'Bill',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy2.jpg`,\n  company: 'Another Company Inc.',\n\n  email: 'bills@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user4 = {\n  id: 'user-4',\n  username: 'suzyq',\n  firstName: 'Suzy',\n  lastName: 'Q',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl2.jpg`,\n  company: 'Not A Company Inc.',\n\n  email: 'suzyq@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user5 = {\n  id: 'user-5',\n  username: 'mikes',\n  firstName: 'Mike',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy3.jpg`,\n  company: 'Same Company Inc.',\n\n  email: 'mikes@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user6 = {\n  id: 'user-6',\n  username: 'saraht',\n  firstName: 'Sarah',\n  lastName: 'T',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl3.jpg`,\n  company: 'Should Be A Company Inc.',\n\n  email: 'saraht@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user7 = {\n  id: 'user-7',\n  username: 'markw',\n  firstName: 'Mark',\n  lastName: 'W',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy4.jpg`,\n  company: 'Was A Company Inc.',\n\n  email: 'markw@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n","filepath":"config/users.js","filename":"users.js","directory":"config","context":"AppShell"},{"content":"import genericColors from './generic-colors';\n\nexport const brand = {\n  global: {\n    colors: {\n      brand: '#20232a',\n      'brand-1': '#20232a',\n      'brand-2': '#20232a',\n      'brand-3': '#20232a',\n      'brand-4': '#20232a',\n      'brand-5': '#20232a',\n      'brand-6': '#20232a',\n      'brand-7': '#20232a',\n      'brand-alt': '#61dafb',\n      'brand-alt-1': '#61dafb',\n      'brand-alt-2': '#61dafb',\n      'brand-alt-3': '#61dafb',\n      'brand-alt-4': '#61dafb',\n      'brand-contrast': '#EEE',\n      focus: 'brand-1',\n      text: { light: 'brand-alt-3' },\n      'text-strong': { light: 'brand-alt-4' },\n      'text-weak': { light: 'brand-alt-2' },\n      'text-xweak': { light: 'brand-alt-1' },\n      border: { light: '#eee' },\n      icon: {\n        dark: 'currentColor',\n        light: 'currentColor',\n      },\n      ...genericColors,\n    },\n    font: {\n      family: 'Montserrat',\n      size: '15px',\n      height: '20px',\n      maxWidth: '300px',\n    },\n    active: {\n      background: 'active-background',\n      color: 'active-text',\n    },\n    hover: {\n      background: 'active-background',\n      color: 'active-text',\n    },\n    selected: {\n      background: 'selected-background',\n      color: 'selected-text',\n    },\n    input: {\n      padding: '10px',\n      weight: 400,\n    },\n    focus: {\n      outline: {\n        color: 'transparent',\n      },\n    },\n  },\n  icon: {\n    size: {\n      small: '18px',\n      medium: '22px',\n      large: '48px',\n      xlarge: '96px',\n    },\n    extend: undefined,\n  },\n};\n","filepath":"config/theme/brand.js","filename":"brand.js","directory":"config/theme","context":"AppShell"},{"content":"const genericColors = {\n  aqua: '#7fdbff',\n  blue: '#0074d9',\n  lime: '#01ff70',\n  navy: '#001f3f',\n  teal: '#39cccc',\n  olive: '#3d9970',\n  green: '#2ecc40',\n  red: '#ff4136',\n  maroon: '#85144b',\n  orange: '#ff851b',\n  purple: '#b10dc9',\n  yellow: '#ffdc00',\n  fuchsia: '#f012be',\n  gray: '#aaaaaa',\n  white: '#ffffff',\n  black: '#111111',\n  silver: '#dddddd',\n};\n\nexport default genericColors;\n","filepath":"config/theme/generic-colors.js","filename":"generic-colors.js","directory":"config/theme","context":"AppShell"},{"content":"export * from './theme';\n","filepath":"config/theme/index.js","filename":"index.js","directory":"config/theme","context":"AppShell"},{"content":"export const themeExport = {\n  name: 'StarterApps',\n  rounding: 2,\n  spacing: 20,\n  defaultMode: 'light',\n  global: {\n    colors: {\n      brand: {\n        dark: '#0353A4',\n        light: '#0466C8',\n      },\n      background: {\n        dark: '#111111',\n        light: '#FFFFFF',\n      },\n      'background-back': {\n        dark: '#111111',\n        light: '#EEEEEE',\n      },\n      'background-front': {\n        dark: '#222222',\n        light: '#FFFFFF',\n      },\n      'background-contrast': {\n        dark: '#FFFFFF11',\n        light: '#11111111',\n      },\n      text: {\n        dark: '#EEEEEE',\n        light: '#333333',\n      },\n      'text-strong': {\n        dark: '#FFFFFF',\n        light: '#000000',\n      },\n      'text-weak': {\n        dark: '#CCCCCC',\n        light: '#444444',\n      },\n      'text-xweak': {\n        dark: '#999999',\n        light: '#666666',\n      },\n      border: {\n        dark: '#444444',\n        light: '#CCCCCC',\n      },\n      control: 'brand',\n      'active-background': 'background-contrast',\n      'active-text': 'text-strong',\n      'selected-background': 'brand',\n      'selected-text': 'text-strong',\n      'status-critical': '#FF4040',\n      'status-warning': '#FFAA15',\n      'status-ok': '#00C781',\n      'status-unknown': '#CCCCCC',\n      'status-disabled': '#CCCCCC',\n      'graph-0': 'brand',\n      'graph-1': 'status-warning',\n    },\n    font: {\n      family: 'Helvetica',\n      size: '15px',\n      height: '20px',\n      maxWidth: '300px',\n    },\n    active: {\n      background: 'active-background',\n      color: 'active-text',\n    },\n    hover: {\n      background: 'active-background',\n      color: 'active-text',\n    },\n    selected: {\n      background: 'selected-background',\n      color: 'selected-text',\n    },\n    control: {\n      border: {\n        radius: '2px',\n      },\n    },\n    drop: {\n      border: {\n        radius: '2px',\n      },\n    },\n    borderSize: {\n      xsmall: '1px',\n      small: '2px',\n      medium: '3px',\n      large: '10px',\n      xlarge: '20px',\n    },\n    breakpoints: {\n      small: {\n        value: 640,\n        borderSize: {\n          xsmall: '1px',\n          small: '2px',\n          medium: '3px',\n          large: '5px',\n          xlarge: '10px',\n        },\n        edgeSize: {\n          none: '0px',\n          hair: '1px',\n          xxsmall: '2px',\n          xsmall: '3px',\n          small: '5px',\n          medium: '10px',\n          large: '20px',\n          xlarge: '40px',\n        },\n        size: {\n          xxsmall: '20px',\n          xsmall: '40px',\n          small: '80px',\n          medium: '160px',\n          large: '320px',\n          xlarge: '640px',\n          full: '100%',\n        },\n      },\n      medium: {\n        value: 1280,\n      },\n      large: {},\n    },\n    edgeSize: {\n      none: '0px',\n      hair: '1px',\n      xxsmall: '3px',\n      xsmall: '5px',\n      small: '10px',\n      medium: '20px',\n      large: '40px',\n      xlarge: '80px',\n      responsiveBreakpoint: 'small',\n    },\n    input: {\n      padding: '10px',\n      weight: 600,\n    },\n    spacing: '20px',\n    size: {\n      xxsmall: '40px',\n      xsmall: '80px',\n      small: '160px',\n      medium: '320px',\n      large: '640px',\n      xlarge: '960px',\n      xxlarge: '1280px',\n      full: '100%',\n    },\n  },\n  chart: {},\n  diagram: {\n    line: {},\n  },\n  meter: {},\n  layer: {\n    background: {\n      dark: '#111111',\n      light: '#FFFFFF',\n    },\n  },\n  formField: {\n    border: {\n      color: 'border',\n      error: {\n        color: {\n          dark: 'white',\n          light: 'status-critical',\n        },\n      },\n      position: 'inner',\n      side: 'all',\n      style: 'solid',\n      size: 'xsmall',\n    },\n    content: {\n      pad: 'small',\n    },\n    disabled: {\n      background: {\n        color: 'status-disabled',\n        opacity: 'medium',\n      },\n    },\n    error: {\n      color: 'status-critical',\n      margin: {\n        vertical: 'xsmall',\n        horizontal: 'xsmall',\n      },\n    },\n    help: {\n      color: 'dark-3',\n      margin: {\n        start: 'small',\n        horizontal: 'xsmall',\n      },\n    },\n    info: {\n      color: 'text-xweak',\n      margin: {\n        vertical: 'xsmall',\n        horizontal: 'small',\n      },\n    },\n    label: {\n      margin: {\n        vertical: 'xsmall',\n        horizontal: 'xsmall',\n      },\n      weight: 'normal',\n    },\n    margin: {\n      bottom: 'small',\n    },\n    round: '2px',\n  },\n  button: {\n    border: {\n      width: '2px',\n      radius: '15px',\n    },\n    padding: {\n      vertical: '3px',\n      horizontal: '18px',\n    },\n  },\n  checkBox: {\n    check: {\n      radius: '2px',\n    },\n    toggle: {\n      radius: '20px',\n      size: '40px',\n    },\n    size: '20px',\n  },\n  radioButton: {\n    size: '20px',\n  },\n  calendar: {\n    small: {\n      fontSize: '11.666666666666666px',\n      lineHeight: 1.375,\n      daySize: '22.86px',\n    },\n    medium: {\n      fontSize: '15px',\n      lineHeight: 1.45,\n      daySize: '45.71px',\n    },\n    large: {\n      fontSize: '25px',\n      lineHeight: 1.11,\n      daySize: '91.43px',\n    },\n  },\n  clock: {\n    analog: {\n      hour: {\n        width: '7px',\n        size: '20px',\n      },\n      minute: {\n        width: '3px',\n        size: '10px',\n      },\n      second: {\n        width: '3px',\n        size: '8px',\n      },\n      size: {\n        small: '60px',\n        medium: '80px',\n        large: '120px',\n        xlarge: '180px',\n        huge: '240px',\n      },\n    },\n    digital: {\n      text: {\n        xsmall: {\n          size: '8.333333333333332px',\n          height: 1.5,\n        },\n        small: {\n          size: '11.666666666666666px',\n          height: 1.43,\n        },\n        medium: {\n          size: '15px',\n          height: 1.375,\n        },\n        large: {\n          size: '18.333333333333332px',\n          height: 1.167,\n        },\n        xlarge: {\n          size: '21.666666666666668px',\n          height: 1.1875,\n        },\n        xxlarge: {\n          size: '28.333333333333336px',\n          height: 1.125,\n        },\n      },\n    },\n  },\n  heading: {\n    level: {\n      '1': {\n        small: {\n          size: '28px',\n          height: '33px',\n          maxWidth: '567px',\n        },\n        medium: {\n          size: '42px',\n          height: '47px',\n          maxWidth: '833px',\n        },\n        large: {\n          size: '68px',\n          height: '73px',\n          maxWidth: '1367px',\n        },\n        xlarge: {\n          size: '95px',\n          height: '100px',\n          maxWidth: '1900px',\n        },\n      },\n      '2': {\n        small: {\n          size: '25px',\n          height: '30px',\n          maxWidth: '500px',\n        },\n        medium: {\n          size: '35px',\n          height: '40px',\n          maxWidth: '700px',\n        },\n        large: {\n          size: '45px',\n          height: '50px',\n          maxWidth: '900px',\n        },\n        xlarge: {\n          size: '55px',\n          height: '60px',\n          maxWidth: '1100px',\n        },\n      },\n      '3': {\n        small: {\n          size: '22px',\n          height: '27px',\n          maxWidth: '433px',\n        },\n        medium: {\n          size: '28px',\n          height: '33px',\n          maxWidth: '567px',\n        },\n        large: {\n          size: '35px',\n          height: '40px',\n          maxWidth: '700px',\n        },\n        xlarge: {\n          size: '42px',\n          height: '47px',\n          maxWidth: '833px',\n        },\n      },\n      '4': {\n        small: {\n          size: '18px',\n          height: '23px',\n          maxWidth: '367px',\n        },\n        medium: {\n          size: '22px',\n          height: '27px',\n          maxWidth: '433px',\n        },\n        large: {\n          size: '25px',\n          height: '30px',\n          maxWidth: '500px',\n        },\n        xlarge: {\n          size: '28px',\n          height: '33px',\n          maxWidth: '567px',\n        },\n      },\n      '5': {\n        small: {\n          size: '13px',\n          height: '18px',\n          maxWidth: '267px',\n        },\n        medium: {\n          size: '13px',\n          height: '18px',\n          maxWidth: '267px',\n        },\n        large: {\n          size: '13px',\n          height: '18px',\n          maxWidth: '267px',\n        },\n        xlarge: {\n          size: '13px',\n          height: '18px',\n          maxWidth: '267px',\n        },\n      },\n      '6': {\n        small: {\n          size: '12px',\n          height: '17px',\n          maxWidth: '233px',\n        },\n        medium: {\n          size: '12px',\n          height: '17px',\n          maxWidth: '233px',\n        },\n        large: {\n          size: '12px',\n          height: '17px',\n          maxWidth: '233px',\n        },\n        xlarge: {\n          size: '12px',\n          height: '17px',\n          maxWidth: '233px',\n        },\n      },\n    },\n  },\n  paragraph: {\n    small: {\n      size: '13px',\n      height: '18px',\n      maxWidth: '267px',\n    },\n    medium: {\n      size: '15px',\n      height: '20px',\n      maxWidth: '300px',\n    },\n    large: {\n      size: '18px',\n      height: '23px',\n      maxWidth: '367px',\n    },\n    xlarge: {\n      size: '22px',\n      height: '27px',\n      maxWidth: '433px',\n    },\n    xxlarge: {\n      size: '28px',\n      height: '33px',\n      maxWidth: '567px',\n    },\n  },\n  text: {\n    xsmall: {\n      size: '12px',\n      height: '17px',\n      maxWidth: '233px',\n    },\n    small: {\n      size: '13px',\n      height: '18px',\n      maxWidth: '267px',\n    },\n    medium: {\n      size: '15px',\n      height: '20px',\n      maxWidth: '300px',\n    },\n    large: {\n      size: '18px',\n      height: '23px',\n      maxWidth: '367px',\n    },\n    xlarge: {\n      size: '22px',\n      height: '27px',\n      maxWidth: '433px',\n    },\n    xxlarge: {\n      size: '28px',\n      height: '33px',\n      maxWidth: '567px',\n    },\n  },\n};\n","filepath":"config/theme/theme-export.js","filename":"theme-export.js","directory":"config/theme","context":"AppShell"},{"content":"import { deepMerge } from 'grommet/utils';\nimport { base } from 'grommet/themes';\nimport { themeExport } from './theme-export';\nimport { brand } from './brand';\n\nexport const theme = deepMerge(base, themeExport, brand);\n","filepath":"config/theme/theme.js","filename":"theme.js","directory":"config/theme","context":"AppShell"}]}
