{"files":[{"content":"import React from 'react';\nimport { Grid } from 'grommet';\nimport * as config from './config';\nimport useAppShell from './useAppShell';\nimport AppShellHeader from './AppShellHeader';\nimport AppShellMain from './AppShellMain';\nimport AppShellSidebar from './AppShellSidebar';\n\nimport './AppShell.css';\n\nexport default function AppShell({ children, ...props }) {\n  const { authHandler, authLabel, user, userInitials } = useAppShell();\n\n  return (\n    <Grid\n      className=\"AppShellContainer\"\n      rows={['xsmall', 'auto']}\n      columns={['1/4', '1/4', '1/4', '1/4']}\n      areas={[\n        ['header', 'header', 'header', 'header'],\n        ['sidebar', 'main', 'main', 'main'],\n      ]}\n      fill\n    >\n      <AppShellHeader\n        authHandler={authHandler}\n        authLabel={authLabel}\n        logo={config?.site.logo}\n        logoSmall={config?.site.logoSmall}\n        userInitials={userInitials}\n        userProfile={user?.profile}\n        siteName={config?.site?.name}\n      />\n      <AppShellSidebar />\n      <AppShellMain>{children}</AppShellMain>\n    </Grid>\n  );\n}\n","filename":"AppShell.js","app":"AppShell"},{"content":"import React from 'react';\nimport { Box, Grid, Header } from 'grommet';\nimport AppShellLogo from './AppShellLogo';\nimport AppShellSearch from './AppShellSearch';\nimport AppShellNotifications from './AppShellNotifications';\nimport AppShellMenu from './AppShellMenu';\n\nexport default function AppShellHeader({\n  authHandler = () => {},\n  authLabel,\n  logo,\n  logoSmall,\n  searchHandler = () => {},\n  siteName,\n  userProfile,\n  userInitials,\n}) {\n  return (\n    <Header gridArea=\"header\" className=\"AppShellHeader\">\n      <Grid\n        columns={['1/4', '3/4']}\n        rows={['auto']}\n        areas={[['logo', 'menu']]}\n        align=\"center\"\n        fill\n      >\n        <AppShellLogo\n          text={siteName}\n          logo={logo}\n          logoSmall={logoSmall}\n          height={{ max: '100%' }}\n          width={{ max: '100%' }}\n        />\n        <Box\n          gridArea=\"menu\"\n          direction=\"row\"\n          justify=\"end\"\n          pad=\"medium\"\n          gap=\"medium\"\n        >\n          <AppShellSearch searchHandler={searchHandler} />\n          <AppShellNotifications />\n          <AppShellMenu\n            authHandler={authHandler}\n            authLabel={authLabel}\n            userInitials={userInitials}\n            userProfile={userProfile}\n          />\n        </Box>\n      </Grid>\n    </Header>\n  );\n}\n","filename":"AppShellHeader.js","app":"AppShell"},{"content":"import React, { useContext, useMemo } from 'react';\nimport { Box, Heading, Image, ResponsiveContext } from 'grommet';\n\nexport default function AppShellLogo({\n  background = 'brand-3',\n  text,\n  logo,\n  logoSmall,\n  ...props\n}) {\n  const showText = !logo && text;\n  const size = useContext(ResponsiveContext);\n  const style = useMemo(() => {\n    if (size === 'small') {\n      return { maxHeight: '32px', maxWidth: '100%' };\n    }\n    return { maxHeight: '100%', maxWidth: '100%' };\n  }, [size]);\n  return (\n    <Box\n      className=\"AppShellLogo\"\n      background={background}\n      gridArea=\"logo\"\n      pad=\"medium\"\n      justify=\"center\"\n      fill\n      {...props}\n    >\n      {showText ? (\n        <Heading level=\"3\" textAlign=\"center\" color=\"white\">\n          {text}\n        </Heading>\n      ) : (\n        <Image\n          src={size === 'small' ? logoSmall : logo}\n          fit=\"contain\"\n          style={style}\n        />\n      )}\n    </Box>\n  );\n}\n","filename":"AppShellLogo.js","app":"AppShell"},{"content":"import React from 'react';\nimport { Main } from 'grommet';\n\nexport default function AppShellMain({ children }) {\n  return (\n    <Main\n      className=\"AppShellMain\"\n      gridArea=\"main\"\n      align=\"start\"\n      background=\"light-1\"\n      pad={{ horizontal: 'medium', vertical: 'medium' }}\n      overflow={{ vertical: 'auto' }}\n    >\n      {children}\n    </Main>\n  );\n}\n","filename":"AppShellMain.js","app":"AppShell"},{"content":"import React from 'react';\nimport { Avatar, Box, DropButton, Text } from 'grommet';\n\nexport default function AppShellMenu({\n  authHandler,\n  authLabel,\n  userInitials,\n  userProfile,\n}) {\n  return (\n    <DropButton\n      className=\"AppShellMenu\"\n      icon={\n        <Avatar background=\"brand\" src={userProfile}>\n          {userInitials}\n        </Avatar>\n      }\n      dropAlign={{ top: 'bottom', right: 'right' }}\n      dropContent={\n        <Box pad=\"medium\">\n          <Text onClick={authHandler}>{authLabel}</Text>\n        </Box>\n      }\n    />\n  );\n}\n","filename":"AppShellMenu.js","app":"AppShell"},{"content":"import React, { useContext, useMemo } from 'react';\nimport { NavLink as RouterNavLink } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport classNames from 'classnames';\nimport {\n  Box,\n  Collapsible,\n  Nav,\n  ResponsiveContext,\n  Text,\n  ThemeContext,\n} from 'grommet';\nimport { Down, Up } from 'grommet-icons';\n\nimport * as config from './config';\n\nfunction AppShellNavSection({ id, name, routes }) {\n  return (\n    <Box className=\"AppShellNavSection\" gap=\"small\">\n      <Box pad={{ horizontal: 'medium' }}>\n        <Text weight=\"bold\">{name}</Text>\n      </Box>\n      <Box gap=\"none\">\n        {routes?.map((route) => (\n          <AppShellNavItem key={route.id} {...route} />\n        ))}\n      </Box>\n    </Box>\n  );\n}\n\nfunction AppShellNavItem({\n  id,\n  path,\n  icon,\n  label,\n  menuBackground = 'brand-2',\n  routes,\n  isNested = false,\n  ...rest\n}) {\n  const size = useContext(ResponsiveContext);\n  const [nav, setNav] = useLocalStorage('nav', {});\n  const isExpanded = useMemo(() => {\n    if (size === 'small') {\n      return true;\n    }\n\n    return nav?.[id];\n  }, [id, nav, size]);\n\n  function toggleMenu() {\n    setNav({\n      ...nav,\n      [id]: !nav?.[id],\n    });\n  }\n\n  if (!routes) {\n    return (\n      <AppShellNavLink\n        to={path}\n        icon={icon}\n        label={label}\n        isNested={isNested}\n        {...rest}\n      />\n    );\n  }\n\n  return (\n    <Box gap=\"xsmall\">\n      <Box>\n        <AppShellNavLink\n          icon={icon}\n          secondaryIcon={\n            isExpanded ? <Up size=\"small\" /> : <Down size=\"small\" />\n          }\n          label={label}\n          to={path}\n          onClick={(e) => {\n            e.preventDefault();\n            toggleMenu();\n          }}\n          isNested={isNested}\n          {...rest}\n        />\n      </Box>\n      <Collapsible direction=\"vertical\" open={isExpanded}>\n        <Box gap=\"xsmall\" background={menuBackground} fill=\"horizontal\">\n          {routes.map((route) => {\n            return <AppShellNavItem key={route.id} {...route} isNested />;\n          })}\n        </Box>\n      </Collapsible>\n    </Box>\n  );\n}\n\nfunction AppShellNavLink({\n  activeBackground = 'brand-4',\n  children,\n  to,\n  icon,\n  secondaryIcon,\n  label,\n  color,\n  size = 'large',\n  weight = 'normal',\n  onClick = (event) => {},\n  isNested,\n  ...props\n}) {\n  const theme = useContext(ThemeContext);\n  const screenSize = useContext(ResponsiveContext);\n  const className = classNames({\n    AppShellNavLink: true,\n    'is-small': screenSize === 'small',\n  });\n  return (\n    <RouterNavLink\n      className={className}\n      to={to}\n      style={{\n        ...theme.anchor,\n        fontWeight: 'normal',\n        color: theme.global.colors['brand-contrast'],\n      }}\n      activeStyle={{\n        ...theme.anchor,\n        fontWeight: 'bold',\n        color: theme.global.colors['brand-contrast'],\n      }}\n      onClick={onClick}\n      exact\n      strict\n      {...props}\n    >\n      <Box\n        direction=\"row\"\n        align=\"center\"\n        pad={{\n          horizontal: 'medium',\n          vertical: 'small',\n        }}\n        gap=\"medium\"\n      >\n        {icon && (\n          <Box className=\"NavLink__icon\">\n            <Text color={theme.global.colors['brand-contrast']}>{icon}</Text>\n          </Box>\n        )}\n\n        {label && (\n          <Box\n            className=\"NavLink__label\"\n            margin={{ left: isNested ? 'medium' : 'none' }}\n            flex\n          >\n            <Text\n              color={color}\n              size={size}\n              margin={{ left: isNested ? 'medium' : 'none' }}\n              truncate\n            >\n              {label}\n            </Text>\n          </Box>\n        )}\n\n        {secondaryIcon && (\n          <Box className=\"NavLink__secondaryIcon\">\n            <Text color={theme.global.colors['brand-contrast']}>\n              {secondaryIcon}\n            </Text>\n          </Box>\n        )}\n      </Box>\n    </RouterNavLink>\n  );\n}\n\nexport default function AppShellNav() {\n  return (\n    <Nav className=\"AppShellNav\" gap=\"medium\">\n      {config?.nav?.sections?.map((section) => (\n        <AppShellNavSection key={section.id} {...section} />\n      ))}\n    </Nav>\n  );\n}\n","filename":"AppShellNav.js","app":"AppShell"},{"content":"import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Card,\n  CardBody,\n  CardHeader,\n  DropButton,\n  Heading,\n  Stack,\n  Text,\n} from 'grommet';\nimport useAppShell from './useAppShell';\n\nfunction Icon({ icon, color = 'text', size = 'medium', ...props }) {\n  const Component = icon;\n  return (\n    <Box {...props}>\n      <Component color={color} size={size} />\n    </Box>\n  );\n}\n\nfunction AppShellNotification({ category, notifications = [] }) {\n  return (\n    <DropButton\n      icon={\n        <AppShellNotificationIndicator\n          icon={category?.icon}\n          count={notifications?.length}\n        />\n      }\n      dropAlign={{ top: 'bottom', right: 'right' }}\n      dropContent={\n        <AppShellNotificationMenu\n          category={category}\n          notifications={notifications}\n        />\n      }\n      dropProps={{\n        plain: true,\n        overflow: 'visible',\n      }}\n    />\n  );\n}\n\nfunction AppShellNotificationIndicator({ icon, count }) {\n  return (\n    <Box>\n      <Stack anchor=\"top-right\">\n        <Icon icon={icon} color=\"brand-3\" />\n        <Box\n          align=\"center\"\n          justify=\"center\"\n          background=\"brand\"\n          pad={{ horizontal: 'xsmall' }}\n          width={{ min: '18px' }}\n          height={{ min: '18px' }}\n          margin={{ top: '-7px', right: '-7px' }}\n          round\n        >\n          <Text size=\"xsmall\" color=\"brand-contrast\">\n            {count}\n          </Text>\n        </Box>\n      </Stack>\n    </Box>\n  );\n}\n\nfunction AppShellNotificationMenu({ category, notifications }) {\n  return (\n    <Card width=\"medium\">\n      <CardHeader pad=\"small\" background=\"white\">\n        <Heading level={5} margin=\"none\">\n          {category?.name}\n        </Heading>\n      </CardHeader>\n      <CardBody pad=\"small\" background=\"light-1\">\n        {notifications.map((notification) => {\n          return (\n            <AppShellNotificationMenuItem\n              key={notification.id}\n              {...notification}\n            />\n          );\n        })}\n      </CardBody>\n    </Card>\n  );\n}\n\nfunction AppShellNotificationMenuItem({\n  description,\n  id,\n  image,\n  metadata,\n  title,\n}) {\n  return (\n    <Box direction=\"row\" align=\"start\" gap=\"small\">\n      {image ? <Avatar src={image} /> : null}\n      <Box gap=\"xsmall\" flex>\n        <Box direction=\"row\" align=\"center\" justify=\"between\" gap=\"xsmall\">\n          {title ? (\n            <Heading level={6} margin=\"none\">\n              {title}\n            </Heading>\n          ) : null}\n          {metadata ? (\n            <Text size=\"xsmall\" color=\"dark-6\">\n              {metadata}\n            </Text>\n          ) : null}\n        </Box>\n        {description ? (\n          <Text size=\"small\" color=\"dark-3\">\n            {description}\n          </Text>\n        ) : null}\n      </Box>\n    </Box>\n  );\n}\nexport default function AppShellNotifications() {\n  const { categories, notificationsByCategoryId } = useAppShell();\n  return (\n    <Box\n      className=\"AppShellNotifications\"\n      direction=\"row\"\n      justify=\"end\"\n      pad=\"medium\"\n      gap=\"medium\"\n    >\n      {categories.map((category) => {\n        return (\n          <AppShellNotification\n            key={category?.id}\n            category={category}\n            notifications={notificationsByCategoryId[category?.id]}\n          />\n        );\n      })}\n    </Box>\n  );\n}\n","filename":"AppShellNotifications.js","app":"AppShell"},{"content":"import React, { useEffect, useRef, useState } from 'react';\nimport { Box, DropButton, TextInput } from 'grommet';\nimport { Search } from 'grommet-icons';\n\nexport default function AppShellSearch({ searchHandler }) {\n  const searchInput = useRef(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    if (isOpen) {\n      setTimeout(() => searchInput.current.focus(), 0);\n    }\n  }, [isOpen]);\n  return (\n    <DropButton\n      className=\"AppShellSearch\"\n      icon={<Search color=\"text\" />}\n      dropAlign={{ right: 'left' }}\n      dropContent={\n        <Box direction=\"row\" pad={{ vertical: 'small' }}>\n          <TextInput\n            ref={searchInput}\n            placeholder=\"Search…\"\n            name=\"search\"\n            type=\"search\"\n          />\n        </Box>\n      }\n      dropProps={{\n        elevation: 'none',\n      }}\n      onClose={() => setIsOpen(false)}\n      onOpen={() => setIsOpen(true)}\n    />\n  );\n}\n","filename":"AppShellSearch.js","app":"AppShell"},{"content":"import React from 'react';\nimport { Box, Sidebar } from 'grommet';\nimport AppShellNav from './AppShellNav.js';\n\nexport default function AppShellSidebar({ background = 'brand-3' }) {\n  return (\n    <Sidebar\n      className=\"AppShellSidebar\"\n      gridArea=\"sidebar\"\n      background={background}\n      pad={{ horizontal: 'none', vertical: 'medium' }}\n      overflow={{ vertical: 'auto' }}\n    >\n      <Box>\n        <AppShellNav />\n      </Box>\n    </Sidebar>\n  );\n}\n","filename":"AppShellSidebar.js","app":"AppShell"},{"content":"export { default } from './AppShell'\n","filename":"index.js","app":"AppShell"},{"content":"import { useMemo, useState } from 'react';\nimport * as config from './config';\nimport { chain } from 'lodash';\n\nexport default function useAppShell() {\n  const [isAuthenticated, setIsAuthenticated] = useState(true);\n  const [user, setUser] = useState(config?.user);\n  const [notifications] = useState(config?.notifications);\n  const [categories] = useState(config?.categories);\n\n  const authLabel = useMemo(() => {\n    return isAuthenticated ? 'logout' : 'login';\n  }, [isAuthenticated]);\n\n  const notificationsByCategoryId = useMemo(\n    () => chain(notifications).groupBy('categoryId').value(),\n    [notifications]\n  );\n\n  const userInitials = useMemo(() => {\n    if (user) {\n      return `${user?.firstName[0]}${user?.lastName[0]}`;\n    }\n\n    return null;\n  }, [user]);\n\n  return useMemo(() => {\n    function authHandler() {\n      if (isAuthenticated) {\n        logout();\n      } else {\n        login();\n      }\n    }\n\n    function login() {\n      setIsAuthenticated(true);\n      setUser(config?.user);\n    }\n\n    function logout() {\n      setIsAuthenticated(false);\n      setUser(null);\n    }\n\n    return {\n      authHandler,\n      authLabel,\n      isAuthenticated,\n      login,\n      logout,\n      notifications,\n      notificationsByCategoryId,\n      categories,\n      user,\n      userInitials,\n    };\n  }, [\n    authLabel,\n    isAuthenticated,\n    notifications,\n    notificationsByCategoryId,\n    categories,\n    user,\n    userInitials,\n  ]);\n}\n","filename":"useAppShell.js","app":"AppShell"}]}
