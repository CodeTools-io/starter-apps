{"files":[{"content":"import React from 'react';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Grid,\n  Heading,\n  InfiniteScroll,\n  Keyboard,\n  Markdown,\n  Text,\n  TextArea,\n  TextInput,\n} from 'grommet';\nimport { v4 as uuid } from 'uuid';\nimport useChat from './useChat';\n\nfunction ChatConversation({ participants, messages, user }) {\n  return (\n    <Box height=\"100%\" overflow=\"auto\">\n      <InfiniteScroll\n        step={5}\n        items={messages?.sort((a, b) => a.sentAt - b.sentAt)}\n        show={messages?.length ? messages?.length - 1 : 0}\n      >\n        {(message) => {\n          const sender = participants.find((p) => p.id === message.authorId);\n\n          return (\n            <Box\n              key={`chat-conversation-${message?.id}`}\n              direction=\"row\"\n              gap=\"small\"\n              pad=\"small\"\n              flex={false}\n            >\n              <Box>\n                <Avatar src={sender.profile}>\n                  {sender.firstName[0]}\n                  {sender.lastName[0]}\n                </Avatar>\n              </Box>\n              <Box>\n                <Text weight=\"bold\">\n                  {sender.firstName} {sender.lastName}\n                </Text>\n                <Markdown>{message.body}</Markdown>\n              </Box>\n            </Box>\n          );\n        }}\n      </InfiniteScroll>\n    </Box>\n  );\n}\n\nfunction ChatConversations({\n  conversations,\n  user,\n  conversationId,\n  selectConversation,\n}) {\n  return (\n    <Box>\n      {conversations.map((conversation) => {\n        return (\n          <Button\n            key={conversation.id}\n            onClick={() => selectConversation(conversation.id)}\n          >\n            <Box\n              background={conversationId === conversation.id ? 'light-1' : null}\n              pad={{ vertical: 'small', horizontal: 'medium' }}\n            >\n              {conversation.participants\n                ?.filter((participant) => participant.id !== user.id)\n                ?.map(\n                  (participant) =>\n                    `${participant.firstName} ${participant.lastName}`\n                )\n                .join(', ')}\n            </Box>\n          </Button>\n        );\n      })}\n    </Box>\n  );\n}\n\nfunction ChatNewConversation({\n  clearRecipientSearch,\n  recipientSearch,\n  recipientSearchResults,\n  searchRecipients,\n  startConversation,\n}) {\n  return (\n    <Box>\n      <TextInput\n        onChange={(e) => searchRecipients(e.target.value)}\n        onSelect={(e) => {\n          startConversation(e.suggestion.value);\n          clearRecipientSearch();\n        }}\n        placeholder=\"Type the name of a contact\"\n        suggestions={recipientSearchResults}\n        value={recipientSearch}\n        plain\n      />\n    </Box>\n  );\n}\nexport default function Chat({ children }) {\n  const {\n    clearContactSearch,\n    clearRecipientSearch,\n    contactSearch,\n    contactSearchResults,\n    conversations,\n    conversation,\n    conversationId,\n    composeConversation,\n    composingConversation,\n    participantsLabel,\n    user,\n    message,\n    recipientSearch,\n    recipientSearchResults,\n    startConversation,\n    updateMessage,\n    searchContacts,\n    searchRecipients,\n    sendMessage,\n    selectConversation,\n    stopComposingConversation,\n  } = useChat();\n\n  return (\n    <Grid\n      columns={['1/4', '1/4', '1/4', '1/4']}\n      rows={['auto', 'flex', 'auto']}\n      areas={[\n        ['ChatContactSearch', 'ChatHeader', 'ChatHeader', 'ChatHeader'],\n        ['ChatSidebar', 'ChatMain', 'ChatMain', 'ChatMain'],\n        ['ChatCompose', 'ChatMessage', 'ChatMessage', 'ChatMessage'],\n      ]}\n      fill\n    >\n      <Box gridArea=\"ChatContactSearch\" pad=\"small\" border=\"right\">\n        <TextInput\n          onChange={(e) => searchContacts(e.target.value)}\n          onSelect={(e) => {\n            startConversation(e.suggestion.value);\n            clearContactSearch();\n          }}\n          placeholder=\"Search contacts\"\n          suggestions={contactSearchResults}\n          value={contactSearch}\n        />\n      </Box>\n\n      <Box gridArea=\"ChatHeader\" pad=\"small\" justify=\"center\" border=\"bottom\">\n        <Heading level={4} margin=\"none\">\n          {composingConversation ? 'New message' : participantsLabel}\n        </Heading>\n      </Box>\n      <Box gridArea=\"ChatSidebar\" fill=\"vertical\" border=\"right\">\n        <ChatConversations\n          conversations={conversations}\n          user={user}\n          conversationId={conversationId}\n          selectConversation={(conversationId) => {\n            stopComposingConversation();\n            selectConversation(conversationId);\n          }}\n        />\n      </Box>\n      <Box gridArea=\"ChatCompose\" pad=\"medium\" border=\"right\" justify=\"end\">\n        <Button\n          label=\"New Message\"\n          onClick={() => composeConversation()}\n          primary\n        />\n      </Box>\n      <Box\n        gridArea=\"ChatMain\"\n        pad={{ horizontal: 'medium' }}\n        overflow=\"auto\"\n        height={{ max: '100%' }}\n      >\n        {composingConversation ? (\n          <ChatNewConversation\n            recipientSearch={recipientSearch}\n            recipientSearchResults={recipientSearchResults}\n            searchRecipients={searchRecipients}\n            startConversation={startConversation}\n            clearRecipientSearch={clearRecipientSearch}\n          />\n        ) : (\n          <ChatConversation user={user} {...conversation} />\n        )}\n      </Box>\n      <Box gridArea=\"ChatMessage\" pad=\"medium\" border=\"top\">\n        <Keyboard\n          onEnter={(event) => {\n            event.preventDefault();\n            sendMessage({\n              id: uuid(),\n              body: message,\n              sentAt: Date.now(),\n              authorId: user?.id,\n            });\n          }}\n        >\n          <TextArea\n            placeholder=\"Type your message\"\n            value={message}\n            onChange={(event) => updateMessage(event.target.value)}\n            resize={false}\n            fill\n          />\n        </Keyboard>\n      </Box>\n    </Grid>\n  );\n}\n","filepath":"Chat.js","filename":"Chat.js","directory":".","context":"Chat"},{"content":"export { default } from './Chat'\n","filepath":"index.js","filename":"index.js","directory":".","context":"Chat"},{"content":"import { useMemo, useState } from 'react';\nimport * as config from './config';\nimport { keyBy } from 'lodash';\nimport { v4 as uuid } from 'uuid';\nexport default function useChat() {\n  const [conversations, setConversations] = useState(config?.conversations);\n  const [contacts] = useState(config?.contacts);\n  const [contactSearch, setContactSearch] = useState();\n  const [recipientSearch, setRecipientSearch] = useState();\n  const [user] = useState(config?.currentUser);\n  const [conversationId, setConversationId] = useState(conversations[0]?.id);\n  const [message, setMessage] = useState();\n  const [composingConversation, setComposingConversation] = useState(false);\n\n  const contactsById = useMemo(() => keyBy(contacts, 'id'), [contacts]);\n  const contactSearchResults = useMemo(() => {\n    const queryValue = contactSearch?.trim?.()?.toLowerCase?.();\n    const searchableFields = ['username', 'firstName', 'lastName', 'company'];\n\n    if (!queryValue) {\n      return [];\n    }\n\n    return contacts\n      ?.filter((contact) => {\n        return searchableFields.some((searchableField) => {\n          return contact?.[searchableField]\n            ?.toLowerCase?.()\n            ?.includes?.(queryValue);\n        });\n      })\n      .map((result) => {\n        return {\n          label: `${result?.firstName} ${result?.lastName}`,\n          value: result?.id,\n        };\n      });\n  }, [contacts, contactSearch]);\n  const conversation = useMemo(() => {\n    return conversations.find(\n      (conversation) => conversation?.id === conversationId\n    );\n  }, [conversations, conversationId]);\n  const conversationsById = useMemo(() => {\n    return keyBy(conversations, 'id');\n  }, [conversations]);\n  const recipientSearchResults = useMemo(() => {\n    const queryValue = recipientSearch?.trim?.()?.toLowerCase?.();\n    const searchableFields = ['username', 'firstName', 'lastName', 'company'];\n\n    if (!queryValue) {\n      return [];\n    }\n\n    return contacts\n      ?.filter((contact) => {\n        return searchableFields.some((searchableField) => {\n          return contact?.[searchableField]\n            ?.toLowerCase?.()\n            ?.includes?.(queryValue);\n        });\n      })\n      .map((result) => {\n        return {\n          label: `${result?.firstName} ${result?.lastName}`,\n          value: result?.id,\n        };\n      });\n  }, [contacts, recipientSearch]);\n  const participants = useMemo(() => conversation?.participants, [\n    conversation,\n  ]);\n  const participantsLabel = useMemo(\n    () =>\n      participants\n        ?.filter((participant) => participant.id !== user.id)\n        ?.map(\n          (participant) => `${participant.firstName} ${participant.lastName}`\n        )\n        .join(', '),\n    [participants, user]\n  );\n  const currentMessages = useMemo(() => conversation?.messages, [conversation]);\n\n  return useMemo(() => {\n    function clearContactSearch() {\n      setContactSearch('');\n    }\n    function searchContacts(value) {\n      setContactSearch(value);\n    }\n    function clearRecipientSearch() {\n      setRecipientSearch('');\n    }\n    function searchRecipients(value) {\n      setRecipientSearch(value);\n    }\n    function selectConversation(conversationId) {\n      setConversationId(conversationId);\n    }\n    function startConversation(contactId) {\n      const existing = conversations.find((convo) =>\n        convo?.participantsIds?.includes(contactId)\n      );\n\n      if (existing) {\n        selectConversation(existing?.id);\n        stopComposingConversation();\n      } else {\n        const id = uuid();\n        setConversations([\n          ...conversations,\n          {\n            id,\n            participants: [user, contactsById?.[contactId]],\n            participantsIds: [user?.id, contactsById?.[contactId]?.id],\n            messages: [],\n          },\n        ]);\n        selectConversation(id);\n        stopComposingConversation();\n      }\n    }\n    function sendMessage(payload) {\n      setConversations(\n        conversations.map((conversation) => {\n          if (conversation.id !== conversationId) {\n            return conversation;\n          }\n\n          return {\n            ...conversation,\n            messages: [...conversation.messages, payload],\n          };\n        })\n      );\n      setMessage('');\n    }\n    function updateMessage(value) {\n      setMessage(value);\n    }\n    function composeConversation() {\n      setComposingConversation(true);\n    }\n    function stopComposingConversation() {\n      setComposingConversation(false);\n      clearRecipientSearch();\n    }\n\n    return {\n      clearContactSearch,\n      clearRecipientSearch,\n      contacts,\n      contactsById,\n      contactSearch,\n      contactSearchResults,\n      conversations,\n      conversationsById,\n      composeConversation,\n      composingConversation,\n      conversation,\n      conversationId,\n      currentMessages,\n      participants,\n      participantsLabel,\n      message,\n      updateMessage,\n      recipientSearch,\n      recipientSearchResults,\n      searchContacts,\n      searchRecipients,\n      startConversation,\n      stopComposingConversation,\n      sendMessage,\n      selectConversation,\n      user,\n    };\n  }, [\n    contacts,\n    contactsById,\n    contactSearch,\n    contactSearchResults,\n    conversations,\n    conversationsById,\n    user,\n    conversation,\n    conversationId,\n    currentMessages,\n    participants,\n    participantsLabel,\n    recipientSearch,\n    recipientSearchResults,\n    message,\n    composingConversation,\n  ]);\n}\n","filepath":"useChat.js","filename":"useChat.js","directory":".","context":"Chat"},{"content":"import * as users from './users';\n\nconst { user1, ...otherUsers } = users;\n\nexport const contacts = Object.values(otherUsers);\n\nexport const currentUser = user1;\n\nexport const conversations = [\n  {\n    id: 'conversation-1',\n    participantsIds: [currentUser?.id, users?.user2?.id],\n    participants: [currentUser, users?.user2],\n    messages: [\n      1,\n      2,\n      1,\n      1,\n      2,\n      1,\n      1,\n      2,\n      1,\n      2,\n      2,\n      1,\n      1,\n      2,\n      1,\n      1,\n      2,\n      1,\n      1,\n      2,\n      1,\n      2,\n      2,\n      1,\n    ].map((userSuffix, index) => {\n      return {\n        id: `conversation-1-${index}`,\n        body: 'Hi! How are you?',\n        sentAt: 1598102365284,\n        authorId: `user-${userSuffix}`,\n      };\n    }),\n  },\n  {\n    id: 'conversation-2',\n    participants: [currentUser, users?.user3],\n    participantsIds: [currentUser?.id, users?.user3?.id],\n    messages: [\n      {\n        id: 'conversation-2a',\n        body: 'Hello!',\n        sentAt: 1598102268116,\n        authorId: 'user-1',\n      },\n      {\n        id: 'conversation-2a',\n        body: 'Hello! How are you?',\n        sentAt: 1598102365284,\n        authorId: 'user-3',\n      },\n    ],\n  },\n  {\n    id: 'conversation-3',\n    participants: [currentUser, users?.user4],\n    participantsIds: [currentUser?.id, users?.user4?.id],\n    messages: [\n      {\n        id: 'conversation-3a',\n        body: 'Hey!',\n        sentAt: 1598102268116,\n        authorId: 'user-1',\n      },\n      {\n        id: 'conversation-3a',\n        body: 'Hey! How are you?',\n        sentAt: 1598102365284,\n        authorId: 'user-4',\n      },\n    ],\n  },\n];\n","filepath":"config/config.js","filename":"config.js","directory":"config","context":"Chat"},{"content":"export * from './config';\n","filepath":"config/index.js","filename":"index.js","directory":"config","context":"Chat"},{"content":"const { PUBLIC_URL } = process.env;\n\nexport const user1 = {\n  id: 'user-1',\n  username: 'johnd',\n  firstName: 'John',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy1.jpg`,\n  company: 'That Company Inc.',\n\n  email: 'johnd@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user2 = {\n  id: 'user-2',\n  username: 'janed',\n  firstName: 'Jane',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl1.jpg`,\n  company: 'Some Company Inc.',\n\n  email: 'janed@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user3 = {\n  id: 'user-3',\n  username: 'bills',\n  firstName: 'Bill',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy2.jpg`,\n  company: 'Another Company Inc.',\n\n  email: 'bills@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user4 = {\n  id: 'user-4',\n  username: 'suzyq',\n  firstName: 'Suzy',\n  lastName: 'Q',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl2.jpg`,\n  company: 'Not A Company Inc.',\n\n  email: 'suzyq@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user5 = {\n  id: 'user-5',\n  username: 'mikes',\n  firstName: 'Mike',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy3.jpg`,\n  company: 'Same Company Inc.',\n\n  email: 'mikes@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user6 = {\n  id: 'user-6',\n  username: 'saraht',\n  firstName: 'Sarah',\n  lastName: 'T',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl3.jpg`,\n  company: 'Should Be A Company Inc.',\n\n  email: 'saraht@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user7 = {\n  id: 'user-7',\n  username: 'markw',\n  firstName: 'Mark',\n  lastName: 'W',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy4.jpg`,\n  company: 'Was A Company Inc.',\n\n  email: 'markw@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n","filepath":"config/users.js","filename":"users.js","directory":"config","context":"Chat"}]}
