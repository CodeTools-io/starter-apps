{"files":[{"content":"import React from 'react';\nimport {\n  Box,\n  Button,\n  Form,\n  FormField,\n  Grid,\n  Heading,\n  Image,\n  List,\n  Text,\n  TextInput,\n} from 'grommet';\n\nimport useContacts from './useContacts';\n\nfunction ContactsList({ contacts, contactId, openContact }) {\n  return (\n    <Box gap=\"medium\">\n      {contacts.map((contact) => {\n        return (\n          <Button\n            key={`contact-${contact.id}`}\n            onClick={() => openContact(contact.id)}\n          >\n            <Box\n              background={contactId === contact.id ? 'light-1' : null}\n              pad={{ vertical: 'small', horizontal: 'medium' }}\n            >\n              <Text>\n                {contact.firstName} {contact.lastName}\n              </Text>\n\n              <Text size=\"small\" color=\"dark-6\">\n                {contact.company}\n              </Text>\n            </Box>\n          </Button>\n        );\n      })}\n    </Box>\n  );\n}\n\nfunction Contact({\n  id,\n  firstName,\n  lastName,\n  company,\n  profile,\n  email,\n  mobile,\n  home,\n  work,\n}) {\n  return (\n    <Box direction=\"row\" gap=\"medium\">\n      <Box gap=\"xsmall\">\n        <Box>\n          <Image src={profile} fit=\"cover\" />\n        </Box>\n        <Heading level={4} margin=\"none\">\n          {firstName} {lastName}\n        </Heading>\n        <Text size=\"small\">{company}</Text>\n      </Box>\n      <Box gap=\"small\" flex>\n        <List\n          primaryKey=\"label\"\n          secondaryKey=\"value\"\n          border={{ size: '0px' }}\n          data={[\n            { label: 'First Name', value: firstName },\n            { label: 'Last Name', value: lastName },\n            { label: 'Company', value: company },\n            { label: 'Email', value: email },\n            { label: 'Mobile', value: mobile },\n            { label: 'Home', value: home },\n            { label: 'Work', value: work },\n          ]}\n        >\n          {(datum, index) => (\n            <Box direction=\"row\" gap=\"small\">\n              <Box width=\"small\">\n                <Text weight=\"bold\">{datum.label}</Text>\n              </Box>\n              <Box>{datum.value}</Box>\n            </Box>\n          )}\n        </List>\n      </Box>\n    </Box>\n  );\n}\n\nfunction ContactForm({ fields, update }) {\n  return (\n    <Form value={fields} onChange={(changes) => update(changes)}>\n      <Box direction=\"row\" gap=\"medium\">\n        <Box gap=\"xsmall\">\n          <Box>\n            <Image src={fields.profile} fit=\"cover\" />\n          </Box>\n        </Box>\n        <Box gap=\"small\" flex>\n          <FormField\n            component={TextInput}\n            label=\"First Name\"\n            name=\"firstName\"\n          />\n          <FormField component={TextInput} label=\"Last Name\" name=\"lastName\" />\n          <FormField component={TextInput} label=\"Company\" name=\"company\" />\n          <FormField component={TextInput} label=\"Email\" name=\"email\" />\n          <FormField component={TextInput} label=\"Mobile\" name=\"mobile\" />\n          <FormField component={TextInput} label=\"Home\" name=\"home\" />\n          <FormField component={TextInput} label=\"Work\" name=\"work\" />\n        </Box>\n      </Box>\n    </Form>\n  );\n}\nexport default function Contacts({ children, ...props }) {\n  const {\n    contacts,\n    contact,\n    contactId,\n    updateContact,\n    openContact,\n    editContact,\n    cancelEdit,\n    saveChanges,\n    isEditMode,\n    contactUpdates,\n    searchContacts,\n    clearContactSearch,\n    contactSearchResults,\n    contactSearch,\n  } = useContacts();\n\n  return (\n    <Grid\n      columns={['1/4', '1/4', '1/4', '1/4']}\n      rows={['auto', 'flex', 'auto']}\n      areas={[\n        [\n          'ContactsSearch',\n          'ContactsHeader',\n          'ContactsHeader',\n          'ContactsHeader',\n        ],\n        ['ContactsSidebar', 'ContactsMain', 'ContactsMain', 'ContactsMain'],\n        ['ContactsSidebar', 'ContactsMain', 'ContactsMain', 'ContactsMain'],\n      ]}\n      fill\n    >\n      <Box\n        gridArea=\"ContactsSearch\"\n        pad=\"medium\"\n        border={[{ side: 'right' }, { side: 'bottom' }]}\n      >\n        <TextInput\n          onChange={(e) => searchContacts(e.target.value)}\n          onSelect={(e) => {\n            openContact(e.suggestion.value);\n            clearContactSearch();\n          }}\n          placeholder=\"Search contacts\"\n          suggestions={contactSearchResults}\n          value={contactSearch}\n          plain\n        />\n      </Box>\n      <Box\n        gridArea=\"ContactsHeader\"\n        pad=\"medium\"\n        direction=\"row\"\n        justify=\"end\"\n        align=\"center\"\n        border=\"bottom\"\n      >\n        {isEditMode ? (\n          <Box direction=\"row\" gap=\"small\">\n            <Button label=\"Cancel\" onClick={cancelEdit} />\n            <Button\n              label=\"Save\"\n              primary\n              onClick={() => saveChanges({ ...contactUpdates })}\n            />\n          </Box>\n        ) : (\n          <Button label=\"Edit\" primary onClick={() => editContact(contactId)} />\n        )}\n      </Box>\n      <Box gridArea=\"ContactsSidebar\" pad=\"none\" border={[{ side: 'right' }]}>\n        <ContactsList\n          contacts={contacts}\n          contactId={contactId}\n          openContact={openContact}\n        />\n      </Box>\n      <Box gridArea=\"ContactsMain\" pad=\"medium\">\n        {isEditMode ? (\n          <ContactForm fields={contactUpdates} update={updateContact} />\n        ) : (\n          <Contact {...contact} />\n        )}\n      </Box>\n    </Grid>\n  );\n}\n","filepath":"Contacts.js","filename":"Contacts.js","directory":".","context":"Contacts"},{"content":"export { default } from './Contacts'\n","filepath":"index.js","filename":"index.js","directory":".","context":"Contacts"},{"content":"import { useMemo, useState } from 'react';\nimport * as config from './config';\n\nexport default function useContacts() {\n  const [contacts, setContacts] = useState(config?.contacts);\n  const [contactSearch, setContactSearch] = useState();\n  const [contactId, setContactId] = useState(contacts[0]?.id);\n  const [contactUpdates, setContactUpdates] = useState({});\n  const [isEditMode, setIsEditMode] = useState(false);\n  const contact = useMemo(() => {\n    return contacts.find((contact) => contact.id === contactId);\n  }, [contacts, contactId]);\n  const contactSearchResults = useMemo(() => {\n    const queryValue = contactSearch?.trim?.()?.toLowerCase?.();\n    const searchableFields = ['username', 'firstName', 'lastName', 'company'];\n\n    if (!queryValue) {\n      return [];\n    }\n\n    return contacts\n      ?.filter((contact) => {\n        return searchableFields.some((searchableField) => {\n          return contact?.[searchableField]\n            ?.toLowerCase?.()\n            ?.includes?.(queryValue);\n        });\n      })\n      .map((result) => {\n        return {\n          label: `${result?.firstName} ${result?.lastName}`,\n          value: result?.id,\n        };\n      });\n  }, [contacts, contactSearch]);\n\n  return useMemo(() => {\n    function updateContact(payload) {\n      setContactUpdates({\n        ...contactUpdates,\n        ...payload,\n      });\n    }\n    function openContact(id) {\n      setContactId(id);\n      setIsEditMode(false);\n    }\n    function editContact(id) {\n      setContactId(id);\n      setContactUpdates(contacts.find((contact) => contact.id === id));\n      setIsEditMode(true);\n    }\n    function cancelEdit() {\n      setIsEditMode(false);\n      setContactUpdates({});\n    }\n    function saveChanges(payload) {\n      setContacts(\n        contacts.map((contact) => {\n          if (contact.id !== payload.id) {\n            return contact;\n          }\n\n          return {\n            ...contact,\n            ...payload,\n          };\n        })\n      );\n      setIsEditMode(false);\n      setContactUpdates({});\n    }\n    function searchContacts(value) {\n      setContactSearch(value);\n    }\n    function clearContactSearch() {\n      setContactSearch('');\n    }\n\n    return {\n      contacts,\n      contact,\n      contactSearch,\n      contactId,\n      updateContact,\n      openContact,\n      editContact,\n      cancelEdit,\n      saveChanges,\n      isEditMode,\n      contactUpdates,\n      searchContacts,\n      clearContactSearch,\n      contactSearchResults,\n    };\n  }, [\n    contacts,\n    contact,\n    contactId,\n    isEditMode,\n    contactUpdates,\n    contactSearch,\n    contactSearchResults,\n  ]);\n}\n","filepath":"useContacts.js","filename":"useContacts.js","directory":".","context":"Contacts"},{"content":"import * as users from './users';\n\nexport const contacts = [\n  users?.user2,\n  users?.user3,\n  users?.user4,\n  users?.user5,\n  users?.user6,\n  users?.user7,\n];\n","filepath":"config/config.js","filename":"config.js","directory":"config","context":"Contacts"},{"content":"export * from './config';\n","filepath":"config/index.js","filename":"index.js","directory":"config","context":"Contacts"},{"content":"const { PUBLIC_URL } = process.env;\n\nexport const user1 = {\n  id: 'user-1',\n  username: 'johnd',\n  firstName: 'John',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy1.jpg`,\n  company: 'That Company Inc.',\n\n  email: 'johnd@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user2 = {\n  id: 'user-2',\n  username: 'janed',\n  firstName: 'Jane',\n  lastName: 'D',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl1.jpg`,\n  company: 'Some Company Inc.',\n\n  email: 'janed@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user3 = {\n  id: 'user-3',\n  username: 'bills',\n  firstName: 'Bill',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy2.jpg`,\n  company: 'Another Company Inc.',\n\n  email: 'bills@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user4 = {\n  id: 'user-4',\n  username: 'suzyq',\n  firstName: 'Suzy',\n  lastName: 'Q',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl2.jpg`,\n  company: 'Not A Company Inc.',\n\n  email: 'suzyq@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user5 = {\n  id: 'user-5',\n  username: 'mikes',\n  firstName: 'Mike',\n  lastName: 'S',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy3.jpg`,\n  company: 'Same Company Inc.',\n\n  email: 'mikes@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user6 = {\n  id: 'user-6',\n  username: 'saraht',\n  firstName: 'Sarah',\n  lastName: 'T',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/girl3.jpg`,\n  company: 'Should Be A Company Inc.',\n\n  email: 'saraht@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n\nexport const user7 = {\n  id: 'user-7',\n  username: 'markw',\n  firstName: 'Mark',\n  lastName: 'W',\n  profile: `${PUBLIC_URL}/placeholder/img/avatars/guy4.jpg`,\n  company: 'Was A Company Inc.',\n\n  email: 'markw@example.com',\n  mobile: '(555) 555-1234',\n  home: '(555) 555-5678',\n  work: '(555) 555-1000',\n};\n","filepath":"config/users.js","filename":"users.js","directory":"config","context":"Contacts"}]}
